{
  "api/CG.ActionExtensions.html": {
    "href": "api/CG.ActionExtensions.html",
    "title": "Class ActionExtensions",
    "keywords": "Class ActionExtensions This class containts extension methods related to the System.Action type. Inheritance System.Object ActionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG Assembly : CG.Core.dll Syntax public static class ActionExtensions Methods WaitAll(IEnumerable<Action>, Int32, CancellationToken) This method runs the collection of actions while limiting the number that run concurrently to, at most, maxConcurrency . Declaration public static void WaitAll(this IEnumerable<Action> actions, int maxConcurrency, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Action > actions The collection of actions to run. System.Int32 maxConcurrency The maximum number of actions to run concurrently. A positive value limits the number of concurrent operations to the set value. If it is -1, there is no limit on the number of concurrently running operations. System.Threading.CancellationToken token An optional cancellation token. WhenAll(IEnumerable<Action>, Int32, CancellationToken) This method runs the collection of actions while limiting the number that run concurrently to, at most, maxConcurrency . Declaration public static Task WhenAll(this IEnumerable<Action> actions, int maxConcurrency, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Action > actions The collection of actions to run. System.Int32 maxConcurrency The maximum number of actions to run concurrently. A positive value limits the number of concurrent operations to the set value. If it is -1, there is no limit on the number of concurrently running operations. System.Threading.CancellationToken token An optional cancellation token. Returns Type Description System.Threading.Tasks.Task Remarks A task to perform the oepration."
  },
  "api/CG.AppDomainExtensions.html": {
    "href": "api/CG.AppDomainExtensions.html",
    "title": "Class AppDomainExtensions",
    "keywords": "Class AppDomainExtensions This class contains extension methods related to the System.AppDomain type. Inheritance System.Object AppDomainExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG Assembly : CG.Core.dll Syntax public static class AppDomainExtensions Methods FriendlyNameEx(AppDomain, Boolean) This method gets the much friendlier name of the app-domain. Declaration public static string FriendlyNameEx(this AppDomain appDomain, bool stripTrailingExtension = false) Parameters Type Name Description System.AppDomain appDomain The app-domain to use for the operation. System.Boolean stripTrailingExtension True to strip any trailing file extension in the friendly name; false otherwise. Returns Type Description System.String The friendly name of this application domain. Exceptions Type Condition System.AppDomainUnloadedException The operation was attempted on an unloaded app-domain."
  },
  "api/CG.CGException.html": {
    "href": "api/CG.CGException.html",
    "title": "Class CGException",
    "keywords": "Class CGException This class represents a codegator related exception. Inheritance System.Object System.Exception CGException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG Assembly : CG.Core.dll Syntax [Serializable] public class CGException : Exception, ISerializable Constructors CGException() This constructor creates a new instance of the CGException class. Declaration public CGException() CGException(SerializationInfo, StreamingContext) This constructor creates a new instance of the CGException class. Declaration public CGException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. CGException(String) This constructor creates a new instance of the CGException class. Declaration public CGException(string message) Parameters Type Name Description System.String message A message for the exception. CGException(String, Exception) This constructor creates a new instance of the CGException class. Declaration public CGException(string message, Exception innerException) Parameters Type Name Description System.String message A message for the exception. System.Exception innerException An inner exception for the exception. Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.MessageEx(Exception, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/CG.Class1.html": {
    "href": "api/CG.Class1.html",
    "title": "Class Class1",
    "keywords": "Class Class1 This is a test class. Inheritance System.Object Class1 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG Assembly : CG.Core.dll Syntax public class Class1 Methods Foo() This is a test method. Declaration public void Foo() Extension Methods ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/CG.Collections.Generic.EnumerableExtensions.html": {
    "href": "api/CG.Collections.Generic.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions",
    "keywords": "Class EnumerableExtensions This class contains extension methods realted to the System.Collections.Generic.IEnumerable<T> type. Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Collections.Generic Assembly : CG.Core.dll Syntax public static class EnumerableExtensions Methods ApplyBlackList<T>(IEnumerable<T>, Func<T, String>, String) This method filters out elements based on the contents of a comma separated black list. Declaration public static IEnumerable<T> ApplyBlackList<T>(this IEnumerable<T> sequence, Func<T, string> selector, string blackList) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to use for the operation. System.Func <T, System.String > selector The selector to apply for the operation. System.String blackList The comma separated black list to use for the operation. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable sequence of T items. Type Parameters Name Description T The type associated with the sequence. Remarks The intent, with this method, is to quickly filter an enumerable sequence by applying a black list to a specific element. So, anything in the sequence that matches the corresponding black list is dropped from the collection. ApplyWhiteList<T>(IEnumerable<T>, Func<T, String>, String) This method filters out elements based on the contents of a comma separated white list. Declaration public static IEnumerable<T> ApplyWhiteList<T>(this IEnumerable<T> sequence, Func<T, string> selector, string whiteList) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to use for the operation. System.Func <T, System.String > selector The selector to apply for the operation. System.String whiteList The comma separated white list to use for the operation. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable sequence of T items. Type Parameters Name Description T The type associated with the sequence. Remarks The intent, with this method, is to quickly filter an enumerable sequence by applying a white list to a specific element. So, anything in the sequence that doesn't match the white list is dropped from the collection. ForEach<T>(IEnumerable<T>, Action<T>) This method iterates through an enumerable sequence applying the specified delegate action to each item. Declaration public static void ForEach<T>(this IEnumerable<T> sequence, Action<T> action) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The enumerable sequence to use for the operation. System.Action <T> action The delegate to apply to each item in the sequence. Type Parameters Name Description T The type of object in the sequence. Remarks The intent, with this method, is to quickly enumerate through the items in an enumerable sequence, without setting up the standard .NET foreach loop. Any errors are collected and thrown as a single System.AggregateException object. This approach is not good for all looping scenarios - such as breaking from a loop early, or returning values from a loop, etc. So use your best judgment when deciding to loop this way. Examples This example shows how to call the ForEach<T>(IEnumerable<T>, Action<T>) method. class TestClass { static void Main() { var list = new int[] { 0, 1, 2, 3 }; list.ForEach(x => { Console.Write(x); }); } } Prints: 0123 ForEach<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, Action<T>) This method recursively iterates through an enumerable sequence applying the specified delegate action to each item. Declaration public static void ForEach<T>(this IEnumerable<T> sequence, Func<T, IEnumerable<T>> selector, Action<T> action) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The enumerable sequence to use for the operation. System.Func <T, System.Collections.Generic.IEnumerable <T>> selector The selector for finding child sequences. System.Action <T> action The delegate to apply to each item in the sequence. Type Parameters Name Description T The type of object in the sequence. Remarks The intent, with this method, is to quickly enumerate through the items in an enumerable sequence, without setting up the standard .NET foreach loop. Any errors are collected and thrown as a single System.AggregateException object. This approach is not good for all looping scenarios - such as breaking from a loop early, or returning values from a loop, etc. So use your best judgment when deciding to loop this way. Examples This example shows how to call the ForEach<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, Action<T>) method. class TestClass { class TestType { public int Id { get; set; } public TestType[] C {get; set; } } static void Main() { var list = new TestType[] { new TestType() { Id = 0, C = new TestType[] { new TestType { Id = 1, C = new TestType[0] } } }, new TestType() { Id = 2, C = new TestType[] { new TestType { Id = 3, C = new TestType[0] } } } }; list.ForEach(x => x.C, y => { Console.Write($\"{Id}\"); }); } } Prints: 0123"
  },
  "api/CG.Collections.Generic.html": {
    "href": "api/CG.Collections.Generic.html",
    "title": "Namespace CG.Collections.Generic",
    "keywords": "Namespace CG.Collections.Generic Classes EnumerableExtensions This class contains extension methods realted to the System.Collections.Generic.IEnumerable<T> type. ListExtensions This class contains extension methods related to the System.Collections.Generic.IList<T> type."
  },
  "api/CG.Collections.Generic.ListExtensions.html": {
    "href": "api/CG.Collections.Generic.ListExtensions.html",
    "title": "Class ListExtensions",
    "keywords": "Class ListExtensions This class contains extension methods related to the System.Collections.Generic.IList<T> type. Inheritance System.Object ListExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Collections.Generic Assembly : CG.Core.dll Syntax public static class ListExtensions Methods AddRange<T>(IList<T>, IEnumerable<T>) This method adds the elements of the specified collection to the end of the System.Collections.Generic.IList<T> . Declaration public static void AddRange<T>(this IList<T> list, IEnumerable<T> collection) Parameters Type Name Description System.Collections.Generic.IList <T> list The list to use for the operation. System.Collections.Generic.IEnumerable <T> collection The collection whose elements should be added to the end of the System.Collections.Generic.IEnumerable<T> The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type. Type Parameters Name Description T The type of elements in the list. Remarks The intent, with this method, is to quickly add a range of elements from one list, into another. ForEach<T>(IList<T>, Action<T>) This method iterates through an enumerable sequence applying the specified delegate action to each item. Declaration public static void ForEach<T>(this IList<T> sequence, Action<T> action) Parameters Type Name Description System.Collections.Generic.IList <T> sequence The enumerable sequence to use for the operation. System.Action <T> action The delegate to apply to each item in the sequence. Type Parameters Name Description T The type of object in the sequence. Remarks The intent, with this method, is to quickly enumerate through the items in a list, without setting up the standard .NET foreach loop. Any errors are collected and thrown as a single System.AggregateException object. This approach is not good for all looping scenarios - such as breaking from a loop early, or returning values from a loop, etc. So use your best judgment when deciding to loop this way. Examples This example shows how to call the ForEach<T>(IList<T>, Action<T>) method. class TestClass { static void Main() { var list = new int[] { 0, 1, 2, 3 }; list.ForEach(x => { Console.Write(x); }); } } Prints: 0123 ForEach<T>(IList<T>, Func<T, IEnumerable<T>>, Action<T>) This method recursively iterates through an enumerable sequence applying the specified delegate action to each item. Declaration public static void ForEach<T>(this IList<T> sequence, Func<T, IEnumerable<T>> selector, Action<T> action) Parameters Type Name Description System.Collections.Generic.IList <T> sequence The enumerable sequence to use for the operation. System.Func <T, System.Collections.Generic.IEnumerable <T>> selector The selector for finding child sequences. System.Action <T> action The delegate to apply to each item in the sequence. Type Parameters Name Description T The type of object in the sequence. Remarks The intent, with this method, is to recursively enumerate through the items in a list, without setting up the standard .NET foreach loop. Any errors are collected and thrown as a single System.AggregateException object. This approach is not good for all looping scenarios - such as breaking from a loop early, or returning values from a loop, etc. So use your best judgment when deciding to loop this way. Examples This example shows how to call the ForEach<T>(IList<T>, Func<T, IEnumerable<T>>, Action<T>) method. class TestClass { class TestType { public int Id { get; set; } public TestType[] C {get; set; } } static void Main() { var list = new TestType[] { new TestType() { Id = 0, C = new TestType[] { new TestType { Id = 1, C = new TestType[0] } } }, new TestType() { Id = 2, C = new TestType[] { new TestType { Id = 3, C = new TestType[0] } } } }; list.ForEach(x => x.C, y => { Console.Write($\"{Id}\"); }); } } Prints: 0123 RemoveRange<T>(IList<T>, Int32, Int32) This method removes a range of elements from a System.Collections.Generic.IList<T> list. Declaration public static void RemoveRange<T>(this IList<T> list, int index, int count) Parameters Type Name Description System.Collections.Generic.IList <T> list The list to use for the operation. System.Int32 index The zero-based starting index of the range of elements to remove. System.Int32 count The number of elements to remove. Type Parameters Name Description T The type of elements in the list. Remarks The intent, with this method, is to quickly remove a range of elements from a list."
  },
  "api/CG.Collections.GuardExtensions.html": {
    "href": "api/CG.Collections.GuardExtensions.html",
    "title": "Class GuardExtensions",
    "keywords": "Class GuardExtensions This class contains extension methods related to the CG.Validations.IGuard type. Inheritance System.Object GuardExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Collections Assembly : CG.Core.dll Syntax public static class GuardExtensions Methods ThrowIfEmpty<T>(IGuard, IEnumerable<T>, String, String, String, Int32) This method throws an exception if the argValue argument contains an empty collection. Declaration public static IGuard ThrowIfEmpty<T>(this IGuard guard, IEnumerable<T> argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description CG.Validations.IGuard guard The guard to use for the operation. System.Collections.Generic.IEnumerable <T> argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description CG.Validations.IGuard The guard value. Type Parameters Name Description T Examples This example shows how to call the ThrowIfEmpty<T>(IGuard, IEnumerable<T>, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new string[0]; // throws an exception, since the argument is invalid. Guard.Instance().ThrowIfEmpty(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains a value that is less than zero."
  },
  "api/CG.Collections.html": {
    "href": "api/CG.Collections.html",
    "title": "Namespace CG.Collections",
    "keywords": "Namespace CG.Collections Classes GuardExtensions This class contains extension methods related to the CG.Validations.IGuard type."
  },
  "api/CG.Diagnostics.html": {
    "href": "api/CG.Diagnostics.html",
    "title": "Namespace CG.Diagnostics",
    "keywords": "Namespace CG.Diagnostics Classes ObjectExtensions This class contains extension methods related to the System.Object type."
  },
  "api/CG.Diagnostics.ObjectExtensions.html": {
    "href": "api/CG.Diagnostics.ObjectExtensions.html",
    "title": "Class ObjectExtensions",
    "keywords": "Class ObjectExtensions This class contains extension methods related to the System.Object type. Inheritance System.Object ObjectExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Diagnostics Assembly : CG.Core.dll Syntax public static class ObjectExtensions Methods GetFieldValue(Object, String, Boolean) This method reads a field value from the specified object. Declaration public static object GetFieldValue(this object obj, string fieldName, bool includeProtected = false) Parameters Type Name Description System.Object obj The object to use for the operation. System.String fieldName The field to use for the operation. System.Boolean includeProtected Determines if protected fields are included in the search. Returns Type Description System.Object The value of the field. Remarks The idea, with this method, is to use reflection to go find and return a field value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. GetFieldValue<T>(Object, String, Boolean) This method reads a field value from the specified object. Declaration public static T GetFieldValue<T>(this object obj, string fieldName, bool includeProtected = false) where T : class Parameters Type Name Description System.Object obj The object to use for the operation. System.String fieldName The field to use for the operation. System.Boolean includeProtected Determines if protected fields are included in the search. Returns Type Description T The value of the field. Type Parameters Name Description T The type of the field. Remarks The idea, with this method, is to use reflection to go find and return a field value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. GetPropertyValue(Object, String, Boolean) This method reads a property value from the specified object. Declaration public static object GetPropertyValue(this object obj, string propertyName, bool includeProtected = false) Parameters Type Name Description System.Object obj The object to use for the operation. System.String propertyName The property to use for the operation. System.Boolean includeProtected Determines if protected properties are included in the search. Returns Type Description System.Object The value of the property. Remarks The idea, with this method, is to use reflection to go find and return a property value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. GetPropertyValue<T>(Object, String, Boolean) This method reads a property value from the specified object. Declaration public static T GetPropertyValue<T>(this object obj, string propertyName, bool includeProtected = false) where T : class Parameters Type Name Description System.Object obj The object to use for the operation. System.String propertyName The property to use for the operation. System.Boolean includeProtected Determines if protected properties are included in the search. Returns Type Description T The value of the property. Type Parameters Name Description T The type of the property. Remarks The idea, with this method, is to use reflection to go find and return a property value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. SetFieldValue(Object, String, Object, Boolean) This method writes a field value for the specified object. Declaration public static void SetFieldValue(this object obj, string fieldName, object value, bool includeProtected = false) Parameters Type Name Description System.Object obj The object to use for the operation. System.String fieldName The field to use for the operation. System.Object value The value to use for the operation. System.Boolean includeProtected Determines if protected fields are included in the search. Remarks The idea, with this method, is to use reflection to go find a field on an object and set the value at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. SetPropertyValue(Object, String, Object, Boolean) This method writes a property value on the specified object. Declaration public static void SetPropertyValue(this object obj, string propertyName, object value, bool includeProtected = false) Parameters Type Name Description System.Object obj The object to use for the operation. System.String propertyName The property to use for the operation. System.Object value The value to use for the operation. System.Boolean includeProtected Determines if protected properties are included in the search. Remarks The idea, with this method, is to use reflection to go find a property on an object and set the value at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) This method reads a field specified by a LINQ expression and returns the value. The linq expression can have nested elements and limited inline method calls, such as: x => x.A.B.C[2]._myField; Declaration public static bool TryGetFieldValue<TSource, TFld>(this TSource source, Expression<Func<TSource, TFld>> selector, out TFld value) Parameters Type Name Description TSource source The sorce object to use for the operation. System.Linq.Expressions.Expression < System.Func <TSource, TFld>> selector The LINQ expression to use for the operation. TFld value The value from the specified field. Returns Type Description System.Boolean True if the field was read; false otherwise. Type Parameters Name Description TSource The type of source object. TFld The type of field. Remarks The idea, with this method, is to use reflection to go find and return a field value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) This method reads a property specified by a LINQ expression and returns the value. The linq expression can have nested elements and limited inline method calls, such as: x => x.A.B.C[2].MyProperty; Declaration public static bool TryGetPropertyValue<TSource, TProp>(this TSource source, Expression<Func<TSource, TProp>> selector, out TProp value) Parameters Type Name Description TSource source The sorce object to use for the operation. System.Linq.Expressions.Expression < System.Func <TSource, TProp>> selector The LINQ expression to use for the operation. TProp value The value from the specified property. Returns Type Description System.Boolean True if the property was read; false otherwise. Type Parameters Name Description TSource The type of source object. TProp The type of property. Remarks The idea, with this method, is to use reflection to go find and return a property value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing."
  },
  "api/CG.DisposableBase.html": {
    "href": "api/CG.DisposableBase.html",
    "title": "Class DisposableBase",
    "keywords": "Class DisposableBase This class is a base implementation of the standard .NET \"disposable pattern\". Inheritance System.Object DisposableBase Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG Assembly : CG.Core.dll Syntax public abstract class DisposableBase : IDisposable Remarks The idea, with this class, is to reduce the amount of clutter created by implementing the System.IDisposable interface on a class. Of course, this approach only works where inheritance is a possibility. Still, it's better than repetitively following the .NET \"disposable pattern\" in every class that implements System.IDisposable . Examples This example demonstrates how to derive from DisposableBase and write your own cleanup code. class MyClass : DisposableBase { protected void override Dispose(bool disposing) { // TODO : write your cleanup code here. base.Dispose(disposing); } } Properties IsDisposed This property contains a flag that indicates whether the object has been disposed of. Declaration protected bool IsDisposed { get; } Property Value Type Description System.Boolean Methods Dispose(Boolean) This method is called when the object is disposed. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to dispose of managed resources; false otherwise. Explicit Interface Implementations IDisposable.Dispose() This method performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/CG.ExceptionExtensions.html": {
    "href": "api/CG.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions",
    "keywords": "Class ExceptionExtensions This class contains extension methods related to the System.Exception type. Inheritance System.Object ExceptionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG Assembly : CG.Core.dll Syntax public static class ExceptionExtensions Methods MessageEx(Exception, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) This method formats and returns an extended message for an exception by adding various optional sections to the standard System.Exception.Message property. Declaration public static string MessageEx(this Exception ex, bool includeType = false, bool includeInnerExceptions = false, bool includeStackTrace = false, bool includeSource = false, bool includeHelpLink = false, bool includeHResult = false, bool includeData = false, bool includeMachineName = false, bool includeUserName = false, bool includeExtras = false) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.Boolean includeType True to include the type of exception; false otherwise. System.Boolean includeInnerExceptions True to include messages from any inner exceptions; false otherwise. System.Boolean includeStackTrace True to include a stack trace from the exception; false otherwise. System.Boolean includeSource True to include the source from the exception; false otherwise. System.Boolean includeHelpLink True to include th help link from the exception; false otherwise. System.Boolean includeHResult True to include the HRESULT from the exception; false otherwise. System.Boolean includeData True to include the data from the exception; false otherwise. System.Boolean includeMachineName True to include the machine name along with the exception; false otherwise. System.Boolean includeUserName True to include the user name along with the exception; false otherwise. System.Boolean includeExtras True to include common properties that usually contain extra information related to the exception; false otherwise. Returns Type Description System.String A formatted message string."
  },
  "api/CG.html": {
    "href": "api/CG.html",
    "title": "Namespace CG",
    "keywords": "Namespace CG Classes ActionExtensions This class containts extension methods related to the System.Action type. AppDomainExtensions This class contains extension methods related to the System.AppDomain type. CGException This class represents a codegator related exception. Class1 This is a test class. DisposableBase This class is a base implementation of the standard .NET \"disposable pattern\". ExceptionExtensions This class contains extension methods related to the System.Exception type. RandomEx This class represents a random number generator with a (slightly) better default seed generator. SingletonBase<T> This class is a base implementation of the singleton pattern. StringExtensions This class contains extensiom methods related to the System.String type."
  },
  "api/CG.IO.GuardExtensions.html": {
    "href": "api/CG.IO.GuardExtensions.html",
    "title": "Class GuardExtensions",
    "keywords": "Class GuardExtensions This class contains extension methods related to the CG.Validations.IGuard type. Inheritance System.Object GuardExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.IO Assembly : CG.Core.dll Syntax public static class GuardExtensions Methods ThrowIfInvalidFileExtension(IGuard, String, String, String, String, Int32) This method throws an exception if the argValue argument contains an invalid file extension. Declaration public static IGuard ThrowIfInvalidFileExtension(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description CG.Validations.IGuard guard The guard instance to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description CG.Validations.IGuard The guard value. Examples This example shows how to call the ThrowIfInvalidFileExtension(IGuard, String, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = \"*\"; // throws an exception, since the file extension is invalid. Guard.Instance().ThrowIfInvalidFolderPath(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains an invalid file extension. ThrowIfInvalidFilePath(IGuard, String, String, String, String, Int32) This method throws an exception if the argValue argument contains an invalid file path. Declaration public static IGuard ThrowIfInvalidFilePath(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description CG.Validations.IGuard guard The guard instance to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description CG.Validations.IGuard The guard value. Examples This example shows how to call the ThrowIfInvalidFilePath(IGuard, String, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = \"*\"; // throws an exception, since the file path is invalid. Guard.Instance().ThrowIfInvalidFilePath(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains an invalid file path. ThrowIfInvalidFolderPath(IGuard, String, String, String, String, Int32) This method throws an exception if the argValue argument contains an invalid folder path. Declaration public static IGuard ThrowIfInvalidFolderPath(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description CG.Validations.IGuard guard The guard instance to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description CG.Validations.IGuard The guard value. Examples This example shows how to call the ThrowIfInvalidFolderPath(IGuard, String, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = \"*\"; // throws an exception, since the folder path is invalid. Guard.Instance().ThrowIfInvalidFolderPath(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains an invalid folder path. ThrowIfNotReadable(IGuard, Stream, String, String, String, Int32) This method throws an exception if the argValue argument contains a value that is not a readable stream. Declaration public static IGuard ThrowIfNotReadable(this IGuard guard, Stream argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description CG.Validations.IGuard guard The guard instance to use for the operation. System.IO.Stream argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description CG.Validations.IGuard The guard value. Examples This example shows how to call the ThrowIfNotReadable(IGuard, Stream, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new FileStream(\"test.doc\", FileMode.Open, FileAccess.Write); // throws an exception, since the stream is not readable. Guard.Instance().ThrowIfNotReadable(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains a stream that is not readable. ThrowIfNotWritable(IGuard, Stream, String, String, String, Int32) This method throws an exception if the argValue argument contains a value that is not a writable stream. Declaration public static IGuard ThrowIfNotWritable(this IGuard guard, Stream argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description CG.Validations.IGuard guard The guard instance to use for the operation. System.IO.Stream argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description CG.Validations.IGuard The guard value. Examples This example shows how to call the ThrowIfNotWritable(IGuard, Stream, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new FileStream(\"test.doc\", FileMode.Open, FileAccess.Read); // throws an exception, since the stream is not writeable. Guard.Instance().ThrowIfNotWritable(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains a stream that is not writable."
  },
  "api/CG.IO.html": {
    "href": "api/CG.IO.html",
    "title": "Namespace CG.IO",
    "keywords": "Namespace CG.IO Classes GuardExtensions This class contains extension methods related to the CG.Validations.IGuard type. TemporaryStream This class is a temporary implementation of System.IO.Stream backed by a temporary disk file."
  },
  "api/CG.IO.TemporaryStream.html": {
    "href": "api/CG.IO.TemporaryStream.html",
    "title": "Class TemporaryStream",
    "keywords": "Class TemporaryStream This class is a temporary implementation of System.IO.Stream backed by a temporary disk file. Inheritance System.Object System.MarshalByRefObject System.IO.Stream TemporaryStream Implements System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.Close() System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.FlushAsync(System.Threading.CancellationToken) System.IO.Stream.ObjectInvariant() System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.IO Assembly : CG.Core.dll Syntax public class TemporaryStream : Stream, IDisposable Remarks The idea, with this class, is to create a temporary stream mapped to an equally temporary backing store. In this case, a temp file. So, this is good to use when you only need storage for a short period of time. It's not good if you want the information to stick around since temp files really aren't guaranteed to live for any set period of time. Constructors TemporaryStream(String) This constructor creates a new instance of the TemporaryStream class. Declaration public TemporaryStream(string ext = \".tmp\") Parameters Type Name Description System.String ext An optional extension for the underlying disk file. Properties BaseStream This property contains a reference to a base stream. Declaration protected FileStream BaseStream { get; } Property Value Type Description System.IO.FileStream CanRead This property gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead CanSeek This property gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek CanWrite This property gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite Length This property gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length Name This property contains the name of the underlying base stream. Declaration public string Name { get; } Property Value Type Description System.String Position This property gets or sets the current position of this stream. Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods Dispose(Boolean) This method releases the unmanaged resources used by the System.IO.FileStream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides System.IO.Stream.Dispose(System.Boolean) Flush() This method clears buffers for this stream and causes any buffered data to be written to the underlying storage. Declaration public override void Flush() Overrides System.IO.Stream.Flush() Read(Byte[], Int32, Int32) This method reads a block of bytes from the stream and writes the data in a given buffer. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. System.Int32 offset The byte offset in array at which the read bytes will be placed. System.Int32 count The maximum number of bytes to read. Returns Type Description System.Int32 The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) Seek(Int64, SeekOrigin) This method sets the current position of this stream to the given value. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset The point relative to origin from which to begin seeking. System.IO.SeekOrigin origin Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type System.IO.SeekOrigin. Returns Type Description System.Int64 The new position in the stream. Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) SetLength(Int64) This method sets the length of this stream to the given value. Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value The new length of the stream. Overrides System.IO.Stream.SetLength(System.Int64) Write(Byte[], Int32, Int32) This method writes a block of bytes to the file stream. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer containing data to write to the stream. System.Int32 offset The zero-based byte offset in array from which to begin copying bytes to the stream. System.Int32 count The maximum number of bytes to write. Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) Implements System.IDisposable Extension Methods ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/CG.RandomEx.html": {
    "href": "api/CG.RandomEx.html",
    "title": "Class RandomEx",
    "keywords": "Class RandomEx This class represents a random number generator with a (slightly) better default seed generator. Inheritance System.Object System.Random RandomEx Inherited Members System.Random.Next() System.Random.Next(System.Int32) System.Random.Next(System.Int32, System.Int32) System.Random.NextBytes(System.Byte[]) System.Random.NextDouble() System.Random.Sample() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG Assembly : CG.Core.dll Syntax public class RandomEx : Random Constructors RandomEx() This constructor creates a new instance of the RandomEx class. Declaration public RandomEx() RandomEx(Int32) This constructor creates a new instance of the RandomEx class. Declaration public RandomEx(int seed) Parameters Type Name Description System.Int32 seed The seed value to use for the operation. Extension Methods ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/CG.Reflection.AppDomainExtensions.html": {
    "href": "api/CG.Reflection.AppDomainExtensions.html",
    "title": "Class AppDomainExtensions",
    "keywords": "Class AppDomainExtensions This class contains extension methods related to the System.AppDomain type. Inheritance System.Object AppDomainExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Reflection Assembly : CG.Core.dll Syntax public static class AppDomainExtensions Methods ExtensionMethods(AppDomain, Type, String, Type[], String, String) This method searches among the assemblies loaded into the current app-domain for any public extension methods associated with the specified type and signature. Declaration public static IEnumerable<MethodInfo> ExtensionMethods(this AppDomain appDomain, Type extensionType, string methodName, Type[] parameterTypes = null, string assemblyWhiteList = \"\", string assemblyBlackList = \"Microsoft*, System*, mscorlib, netstandard\") Parameters Type Name Description System.AppDomain appDomain The application domain to use for the operation. System.Type extensionType The type to match against. System.String methodName The method name to match against. System.Type [] parameterTypes An optional list of parameter type(s) to match against. System.String assemblyWhiteList An optional white list of assembly names - for narrowing the range of assemblies searched. System.String assemblyBlackList An optional white list of assembly names - for narrowing the range of assemblies searched. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.MethodInfo > A sequence of System.Reflection.MethodInfo objects representing zero or more matching extension methods."
  },
  "api/CG.Reflection.AssemblyExtensions.html": {
    "href": "api/CG.Reflection.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions",
    "keywords": "Class AssemblyExtensions This class contains extension methods reated to the System.Reflection.Assembly type. Inheritance System.Object AssemblyExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Reflection Assembly : CG.Core.dll Syntax public static class AssemblyExtensions Methods ReadAssemblyCompany(Assembly) Reads the value of the System.Reflection.AssemblyCompanyAttribute for the given assembly. Declaration public static string ReadAssemblyCompany(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's company attribute. ReadAssemblyDescription(Assembly) Reads the value of the System.Reflection.AssemblyDescriptionAttribute for the given assembly. Declaration public static string ReadAssemblyDescription(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's description attribute. ReadAssemblyFileVersion(Assembly) Reads the value of the System.Reflection.AssemblyFileVersionAttribute for the given assembly. Declaration public static string ReadAssemblyFileVersion(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's file version attribute. ReadAssemblyGuid(Assembly) Reads the value of the System.Runtime.InteropServices.GuidAttribute for the given assembly. Declaration public static string ReadAssemblyGuid(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's guid attribute. ReadAssemblyProduct(Assembly) Reads the value of the System.Reflection.AssemblyProductAttribute for the given assembly. Declaration public static string ReadAssemblyProduct(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's product attribute. ReadAssemblyTitle(Assembly) Reads the value of the System.Reflection.AssemblyTitleAttribute for the given assembly. Declaration public static string ReadAssemblyTitle(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's title attribute. ReadAssemblyTrademark(Assembly) Reads the value of the System.Reflection.AssemblyTrademarkAttribute for the given assembly. Declaration public static string ReadAssemblyTrademark(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's trademark attribute. ReadAssemblyVersion(Assembly) Reads the value of the System.Reflection.AssemblyVersionAttribute for the given assembly. Declaration public static string ReadAssemblyVersion(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's version attribute. ReadCopyright(Assembly) Reads the value of the System.Reflection.AssemblyCopyrightAttribute for the given assembly. Declaration public static string ReadCopyright(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's copyright attribute."
  },
  "api/CG.Reflection.html": {
    "href": "api/CG.Reflection.html",
    "title": "Namespace CG.Reflection",
    "keywords": "Namespace CG.Reflection Classes AppDomainExtensions This class contains extension methods related to the System.AppDomain type. AssemblyExtensions This class contains extension methods reated to the System.Reflection.Assembly type. PropertyCache This class represents cached property reflection information."
  },
  "api/CG.Reflection.PropertyCache.html": {
    "href": "api/CG.Reflection.PropertyCache.html",
    "title": "Class PropertyCache",
    "keywords": "Class PropertyCache This class represents cached property reflection information. Inheritance System.Object PropertyCache Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Reflection Assembly : CG.Core.dll Syntax public class PropertyCache Remarks The idea, with this class, is to make it easier to reach out and quickly grab property information for a type. Also, to have that same information cached locally to avoid unnecessary reflection. Properties Item[Type, String] This indexer gets/sets cached property information. Declaration public PropertyInfo this[Type type, string property] { get; } Parameters Type Name Description System.Type type The type to use for the operation. System.String property The property to use for the operation. Property Value Type Description System.Reflection.PropertyInfo Cached property information. Extension Methods ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/CG.SingletonBase-1.html": {
    "href": "api/CG.SingletonBase-1.html",
    "title": "Class SingletonBase<T>",
    "keywords": "Class SingletonBase<T> This class is a base implementation of the singleton pattern. Inheritance System.Object SingletonBase<T> Retry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG Assembly : CG.Core.dll Syntax public abstract class SingletonBase<T> where T : SingletonBase<T> Type Parameters Name Description T The type associated with the derived class. Methods Instance() This method creates a new singleton instance of the T type. Declaration public static T Instance() Returns Type Description T The singleton instance of T Examples The following example illustrates how to create a singleton instance of the MyClass type: Given the following concrete type: class MyClass : SingletonBase<MyClass> { private MyClass() {} // This private ctor is important! } A singleton instance can be created using the Instance() method: void MyTest() { // This creates a singleton instance of MyClass. MyClass instance = MyClass.Instance(); } Exceptions Type Condition System.MissingMethodException This exception is thrown if the type T is missing it's private ctor. Extension Methods ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/CG.StringExtensions.html": {
    "href": "api/CG.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions This class contains extensiom methods related to the System.String type. Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG Assembly : CG.Core.dll Syntax public static class StringExtensions Methods IsMatch(String, String) This method compares two strings and returns true if they match; false if they don't. The rhs parameter may have embedded wildcard symbols in it. The acceptable wild card symbols are: * to match zero or more characters, or, ? to match a single character. Declaration public static bool IsMatch(this string lhs, string rhs) Parameters Type Name Description System.String lhs The left hand side of the operation. System.String rhs The right hand side of the operation. Returns Type Description System.Boolean The results of the comparison. Examples This example shows how to call the IsMatch(String, String) method. class TestClass { static void Main() { var toBeMatched = \"This is a string to be matched.\"; var isMatch = toBeMatched.IsMatch(\"*a string*\"); // IsMatch is true. } } Shuffle(String) This method randomly shuffles the characters in a string. Declaration public static string Shuffle(this string incoming) Parameters Type Name Description System.String incoming The string to be shuffled. Returns Type Description System.String A randomly shuffled version of the specified string."
  },
  "api/CG.Threading.Tasks.html": {
    "href": "api/CG.Threading.Tasks.html",
    "title": "Namespace CG.Threading.Tasks",
    "keywords": "Namespace CG.Threading.Tasks Classes TaskExtensions This class contains extension methods related to the System.Threading.Tasks.Task type."
  },
  "api/CG.Threading.Tasks.TaskExtensions.html": {
    "href": "api/CG.Threading.Tasks.TaskExtensions.html",
    "title": "Class TaskExtensions",
    "keywords": "Class TaskExtensions This class contains extension methods related to the System.Threading.Tasks.Task type. Inheritance System.Object TaskExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Threading.Tasks Assembly : CG.Core.dll Syntax public static class TaskExtensions Methods WaitAll(IEnumerable<Task>, Int32, Int32, CancellationToken) This method runs the collection of tasks while limiting the number that run concurrently to, at most, maxConcurrency . Declaration public static void WaitAll(this IEnumerable<Task> tasks, int maxConcurrency, int maxTimeout = -1, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks The collection of tasks to run. System.Int32 maxConcurrency The maximum number of tasks to run concurrently. A positive value limits the number of concurrent operations to the set value. If it is -1, there is no limit on the number of concurrently running operations. System.Int32 maxTimeout The maximum number of milliseconds to wait for the operations to finish. System.Threading.CancellationToken token An optional cancellation token. WhenAll(IEnumerable<Task>, Int32, Int32, CancellationToken) This method runs the collection of tasks while limiting the number that run concurrently to, at most, maxConcurrency . Declaration public static Task WhenAll(this IEnumerable<Task> tasks, int maxConcurrency, int maxTimeout = -1, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks The collection of tasks to run. System.Int32 maxConcurrency The maximum number of tasks to run concurrently. A positive value limits the number of concurrent operations to the set value. If it is -1, there is no limit on the number of concurrently running operations. System.Int32 maxTimeout The maximum number of milliseconds to wait for the operations to finish. System.Threading.CancellationToken token An optional cancellation token. Returns Type Description System.Threading.Tasks.Task Remarks A task to perform the operation."
  },
  "api/CG.Utilities.html": {
    "href": "api/CG.Utilities.html",
    "title": "Namespace CG.Utilities",
    "keywords": "Namespace CG.Utilities Classes Retry This class is a singleton implementation of the IRetry interface. RetryExtensions This class contains extensiom methods related to the IRetry type. Interfaces IRetry This interface represents an object that retries operations."
  },
  "api/CG.Utilities.IRetry.html": {
    "href": "api/CG.Utilities.IRetry.html",
    "title": "Interface IRetry",
    "keywords": "Interface IRetry This interface represents an object that retries operations. Namespace : CG.Utilities Assembly : CG.Core.dll Syntax public interface IRetry Extension Methods ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean) RetryExtensions.Execute<T>(IRetry, Func<T>, Int32, Int32) RetryExtensions.Execute<T>(IRetry, Func<T>, Func<Exception, Boolean>, Int32, Int32) RetryExtensions.Execute(IRetry, Action, Int32, Int32) RetryExtensions.Execute(IRetry, Action, Func<Exception, Boolean>, Int32, Int32) RetryExtensions.ExecuteAsync(IRetry, Action, Int32, Int32) RetryExtensions.ExecuteAsync(IRetry, Action, Func<Exception, Boolean>, Int32, Int32) RetryExtensions.ExecuteAsync<T>(IRetry, Func<Task<T>>, Int32, Int32) RetryExtensions.ExecuteAsync<T>(IRetry, Func<Task<T>>, Func<Exception, Boolean>, Int32, Int32)"
  },
  "api/CG.Utilities.Retry.html": {
    "href": "api/CG.Utilities.Retry.html",
    "title": "Class Retry",
    "keywords": "Class Retry This class is a singleton implementation of the IRetry interface. Inheritance System.Object SingletonBase < Retry > Retry Implements IRetry Inherited Members SingletonBase<Retry>.Instance() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Utilities Assembly : CG.Core.dll Syntax public sealed class Retry : SingletonBase<Retry>, IRetry Implements IRetry Extension Methods ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean) RetryExtensions.Execute<T>(IRetry, Func<T>, Int32, Int32) RetryExtensions.Execute<T>(IRetry, Func<T>, Func<Exception, Boolean>, Int32, Int32) RetryExtensions.Execute(IRetry, Action, Int32, Int32) RetryExtensions.Execute(IRetry, Action, Func<Exception, Boolean>, Int32, Int32) RetryExtensions.ExecuteAsync(IRetry, Action, Int32, Int32) RetryExtensions.ExecuteAsync(IRetry, Action, Func<Exception, Boolean>, Int32, Int32) RetryExtensions.ExecuteAsync<T>(IRetry, Func<Task<T>>, Int32, Int32) RetryExtensions.ExecuteAsync<T>(IRetry, Func<Task<T>>, Func<Exception, Boolean>, Int32, Int32)"
  },
  "api/CG.Utilities.RetryExtensions.html": {
    "href": "api/CG.Utilities.RetryExtensions.html",
    "title": "Class RetryExtensions",
    "keywords": "Class RetryExtensions This class contains extensiom methods related to the IRetry type. Inheritance System.Object RetryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Utilities Assembly : CG.Core.dll Syntax public static class RetryExtensions Methods Execute(IRetry, Action, Func<Exception, Boolean>, Int32, Int32) This method calls the action action and automatically retries as long as the shouldRetry returns true and the maximum number of retries hasn't yet been reached. Declaration public static void Execute(this IRetry retry, Action action, Func<Exception, bool> shouldRetry, int maxRetries = 3, int delayMS = 0) Parameters Type Name Description IRetry retry The retry object to use for the operation. System.Action action The action to be performed. System.Func < System.Exception , System.Boolean > shouldRetry A func to determine if another retry to be performed. Should return True to retry; False otherwise. System.Int32 maxRetries The maximum number of times to retry the operation. System.Int32 delayMS The number of milliseconds to wait between retry attempts. Exceptions Type Condition System.ArgumentNullException This exception is thrown if the action or shouldRetry parameters are NULL. Execute(IRetry, Action, Int32, Int32) This method calls the action action and automatically retries as long as the the maximum number of retries hasn't yet been reached. Declaration public static void Execute(this IRetry retry, Action action, int maxRetries = 3, int delayMS = 0) Parameters Type Name Description IRetry retry The retry object to use for the operation. System.Action action The action to be performed. System.Int32 maxRetries The maximum number of times to retry the operation. System.Int32 delayMS The number of milliseconds to wait between retry attempts. Exceptions Type Condition System.ArgumentNullException This exception is thrown if the action parameter is NULL. Execute<T>(IRetry, Func<T>, Func<Exception, Boolean>, Int32, Int32) This method calls the action func and automatically retries as long as the shouldRetry returns true and the maximum number of retries hasn't yet been reached. Declaration public static T Execute<T>(this IRetry retry, Func<T> action, Func<Exception, bool> shouldRetry, int maxRetries = 3, int delayMS = 0) Parameters Type Name Description IRetry retry The retry object to use for the operation. System.Func <T> action The action to be performed. System.Func < System.Exception , System.Boolean > shouldRetry A func to determine if another retry to be performed. Should return True to retry; False otherwise. System.Int32 maxRetries The maximum number of times to retry the operation. System.Int32 delayMS The number of milliseconds to wait between retry attempts. Returns Type Description T The return from the action. Type Parameters Name Description T The type to return from the action. Exceptions Type Condition System.ArgumentNullException This exception is thrown if the action or shouldRetry parameters are NULL. Execute<T>(IRetry, Func<T>, Int32, Int32) This method calls the action func and automatically retries as long as the maximum number of retries hasn't yet been reached. Declaration public static T Execute<T>(this IRetry retry, Func<T> action, int maxRetries = 3, int delayMS = 0) Parameters Type Name Description IRetry retry The retry object to use for the operation. System.Func <T> action The action to be performed. System.Int32 maxRetries The maximum number of times to retry the operation. System.Int32 delayMS The number of milliseconds to wait between retry attempts. Returns Type Description T The return from the action. Type Parameters Name Description T The type to return from the action. Exceptions Type Condition System.ArgumentNullException This exception is thrown if the action parameter is NULL. ExecuteAsync(IRetry, Action, Func<Exception, Boolean>, Int32, Int32) This method calls the action action and automatically retries as long as the shouldRetry returns true and the maximum number of retries hasn't yet been reached. Declaration public static Task ExecuteAsync(this IRetry retry, Action action, Func<Exception, bool> shouldRetry, int maxRetries = 3, int delayMS = 0) Parameters Type Name Description IRetry retry The retry object to use for the operation. System.Action action The action to be performed. System.Func < System.Exception , System.Boolean > shouldRetry A func to determine if another retry to be performed. Should return True to retry; False otherwise. System.Int32 maxRetries The maximum number of times to retry the operation. System.Int32 delayMS The number of milliseconds to wait between retry attempts. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Exceptions Type Condition System.ArgumentNullException This exception is thrown if the action or shouldRetry parameters are NULL. ExecuteAsync(IRetry, Action, Int32, Int32) This method calls the action action and automatically retries as long as the the maximum number of retries hasn't yet been reached. Declaration public static Task ExecuteAsync(this IRetry retry, Action action, int maxRetries = 3, int delayMS = 0) Parameters Type Name Description IRetry retry The retry object to use for the operation. System.Action action The action to be performed. System.Int32 maxRetries The maximum number of times to retry the operation. System.Int32 delayMS The number of milliseconds to wait between retry attempts. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Exceptions Type Condition System.ArgumentNullException This exception is thrown if the action parameter is NULL. ExecuteAsync<T>(IRetry, Func<Task<T>>, Func<Exception, Boolean>, Int32, Int32) This method calls the action func and automatically retries as long as the shouldRetry returns true and the maximum number of retries hasn't yet been reached. Declaration public static Task<T> ExecuteAsync<T>(this IRetry retry, Func<Task<T>> action, Func<Exception, bool> shouldRetry, int maxRetries = 3, int delayMS = 0) Parameters Type Name Description IRetry retry The retry object to use for the operation. System.Func < System.Threading.Tasks.Task <T>> action The action to be performed. System.Func < System.Exception , System.Boolean > shouldRetry A func to determine if another retry to be performed. Should return True to retry; False otherwise. System.Int32 maxRetries The maximum number of times to retry the operation. System.Int32 delayMS The number of milliseconds to wait between retry attempts. Returns Type Description System.Threading.Tasks.Task <T> A task to perform the operation. Type Parameters Name Description T The type to return from the action. Exceptions Type Condition System.ArgumentNullException This exception is thrown if the action or shouldRetry parameters are NULL. ExecuteAsync<T>(IRetry, Func<Task<T>>, Int32, Int32) This method calls the action func and automatically retries as long as the the maximum number of retries hasn't yet been reached. Declaration public static Task<T> ExecuteAsync<T>(this IRetry retry, Func<Task<T>> action, int maxRetries = 3, int delayMS = 0) Parameters Type Name Description IRetry retry The retry object to use for the operation. System.Func < System.Threading.Tasks.Task <T>> action The action to be performed. System.Int32 maxRetries The maximum number of times to retry the operation. System.Int32 delayMS The number of milliseconds to wait between retry attempts. Returns Type Description System.Threading.Tasks.Task <T> A task to perform the operation. Type Parameters Name Description T The type to return from the action. Exceptions Type Condition System.ArgumentNullException This exception is thrown if the action parameter is NULL."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Core.dll contains a general purpose software framework developed by CodeGator. Learn to use CG.Core to create applications, or peruse API references, sample code, tutorials, and more."
  }
}