{
  "api/CG.EntityFrameworkCore.EntityMapBase-1.html": {
    "href": "api/CG.EntityFrameworkCore.EntityMapBase-1.html",
    "title": "Class EntityMapBase<TEntity>",
    "keywords": "Class EntityMapBase<TEntity> This class represents a base implementation of the interface. Inheritance System.Object EntityMapBase<TEntity> Namespace : CG.EntityFrameworkCore Assembly : CG.EntityFrameworkCore.dll Syntax public abstract class EntityMapBase<TEntity> : IEntityTypeConfiguration<TEntity> where TEntity : class Type Parameters Name Description TEntity The type of associated entity. Constructors EntityMapBase(ModelBuilder) This constructor creates a new instance of the EntityMapBase<TEntity> class. Declaration public EntityMapBase(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Fields _modelBuilder This field contains the model builder for this map. Declaration protected readonly ModelBuilder _modelBuilder Field Value Type Description ModelBuilder Methods Configure(EntityTypeBuilder<TEntity>) This method may be overridden in order to configure the TEntity entity. Declaration public abstract void Configure(EntityTypeBuilder<TEntity> builder) Parameters Type Name Description EntityTypeBuilder <TEntity> builder The builder to use for the operation."
  },
  "api/CG.EntityFrameworkCore.html": {
    "href": "api/CG.EntityFrameworkCore.html",
    "title": "Namespace CG.EntityFrameworkCore",
    "keywords": "Namespace CG.EntityFrameworkCore Classes EntityMapBase<TEntity> This class represents a base implementation of the interface."
  },
  "api/CG.EntityFrameworkCore.Options.DataAcessLayerOptions.html": {
    "href": "api/CG.EntityFrameworkCore.Options.DataAcessLayerOptions.html",
    "title": "Class DataAcessLayerOptions",
    "keywords": "Class DataAcessLayerOptions This class contains configuration settings for a data-access layer (DAL). Inheritance System.Object DataAcessLayerOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.EntityFrameworkCore.Options Assembly : CG.EntityFrameworkCore.dll Syntax public class DataAcessLayerOptions Properties DropDatabaseOnStartup This property directs the DAL to drop the underlying database on startup. Declaration public bool DropDatabaseOnStartup { get; set; } Property Value Type Description System.Boolean Remarks This property is ignored in production. MigrateDatabaseOnStartup This property directs the DAL to migrate the underlying database on startup. Declaration public bool MigrateDatabaseOnStartup { get; set; } Property Value Type Description System.Boolean Remarks This property is ignored in production. If the DropDatabaseOnStartup property is set to true then migrations are always applied, since the database is then dropped and re-created. This property allows migrations to be applied without dropping and re-creating the database. Provider This property contains the name of the currently selected provider. Declaration public string Provider { get; set; } Property Value Type Description System.String SectionPath This property is for internal use, only. It contains the path to the provider's configuration section. Declaration public string SectionPath { get; set; } Property Value Type Description System.String"
  },
  "api/CG.EntityFrameworkCore.Options.html": {
    "href": "api/CG.EntityFrameworkCore.Options.html",
    "title": "Namespace CG.EntityFrameworkCore.Options",
    "keywords": "Namespace CG.EntityFrameworkCore.Options Classes DataAcessLayerOptions This class contains configuration settings for a data-access layer (DAL)."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes WebApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions.html",
    "title": "Class WebApplicationBuilderExtensions",
    "keywords": "Class WebApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.EntityFrameworkCore.dll Syntax public static class WebApplicationBuilderExtensions Methods AddDataAccess(WebApplicationBuilder, String, Nullable<ILogger>) This method uses the information in the specified configuration section to call the AddXXXDataAcess method, for the currently configured provider, where the XXX part is dynamically replaced with the value of the DAL:Provider key, in the configuration. Declaration public static WebApplicationBuilder AddDataAccess(this WebApplicationBuilder webApplicationBuilder, string sectionPath = \"DAL\", ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.String sectionPath The configuration section path to use for the operation. Defaults to DAL . System.Nullable < ILogger > bootstrapLogger An optional bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style. Remarks There is a convention that says the target extension method, in your assembly, should look like this: public static WebApplicationBuilder AddMyProviderDataAccess( this WebApplicationBuilder webApplicationBuilder, string sectionName = \"DAL:MyProvider\", ILogger? bootstrapLogger = null ); Where the AddMyProviderDataAccess method name is derived from the corresponding provider ( MyProvider in this example). The SectionName parameter can by anything you like, but it should be legal a JSON name, since it must match a corresponding section in the application's configuration. The bootstrapLogger parameter can be provided if you want to log the internal actions of the method. That can be useful for troubleshooting, when the method fails to find, or call, your extension method. Examples This example demonstrates using the method in a typical ASP.NET application: var builder = WebApplication.CreateBuilder(args); builder.AddDataAccess(); // Normal builder configuration code removed, for clarity var app = builder.Build(); // Normal app startup code removed, for clarity app.Run();"
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions.html",
    "title": "Class WebApplicationExtensions",
    "keywords": "Class WebApplicationExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. Inheritance System.Object WebApplicationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.EntityFrameworkCore.dll Syntax public static class WebApplicationExtensions Methods UseDataAccess(WebApplication) This method uses the information in the options to call the UseXXXDataAcess method for the currently configured provider, where the XXX part is dynamically replaced with the value of the field. Declaration public static WebApplication UseDataAccess(this WebApplication webApplication) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplication The value of the webApplication parameter, for chaining calls together, Fluent style. Remarks The method only functions while running in a development environment. For use in non-development environments, the method returns without actually doing anything. Examples This example demonstrates using the method in a typical ASP.NET application: var builder = WebApplication.CreateBuilder(args); // Normal builder configuration code removed, for clarity var app = builder.Build(); // Normal app startup code removed, for clarity app.UseDataAccess(); app.Run();"
  },
  "api/Microsoft.EntityFrameworkCore.DatabaseFacadeExtensions.html": {
    "href": "api/Microsoft.EntityFrameworkCore.DatabaseFacadeExtensions.html",
    "title": "Class DatabaseFacadeExtensions",
    "keywords": "Class DatabaseFacadeExtensions This class contains extension methods related to the type. Inheritance System.Object DatabaseFacadeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : CG.EntityFrameworkCore.dll Syntax public static class DatabaseFacadeExtensions Methods GetDatabaseName(DatabaseFacade) This method returns the database name using the connection string from the given object. Declaration public static string GetDatabaseName(this DatabaseFacade databaseFacade) Parameters Type Name Description DatabaseFacade databaseFacade The database facade to use for the operation. Returns Type Description System.String The value the database name used in the connection string, or an empty string if the database wasn't specified in the connection string. GetServerName(DatabaseFacade) This method returns the server name using the connection string from the given object. Declaration public static string GetServerName(this DatabaseFacade databaseFacade) Parameters Type Name Description DatabaseFacade databaseFacade The database facade to use for the operation. Returns Type Description System.String The value the server used in the connection string, or an empty string if the server wasn't specified in the connection string."
  },
  "api/Microsoft.EntityFrameworkCore.Design.DesignTimeDbContextFactory-1.html": {
    "href": "api/Microsoft.EntityFrameworkCore.Design.DesignTimeDbContextFactory-1.html",
    "title": "Class DesignTimeDbContextFactory<TContext>",
    "keywords": "Class DesignTimeDbContextFactory<TContext> This class is a base implementation of the Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory<TContext> interface. Inheritance System.Object DesignTimeDbContextFactory<TContext> Implements Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory <TContext> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore.Design Assembly : CG.EntityFrameworkCore.dll Syntax public abstract class DesignTimeDbContextFactory<TContext> : IDesignTimeDbContextFactory<TContext> where TContext : DbContext Type Parameters Name Description TContext The type of associated data-context. Remarks The class reads a local 'appSettings.json' file with the connection information required to create a TContext instance, at runtime. The OnConfigureDataContextOptions(DbContextOptionsBuilder<TContext>, IConfiguration) method is called, internally, to configure the data-context options using the settings that were read in the 'appSettings.json' file.\"/> Examples This examples demonstrates deriving from DesignTimeDbContextFactory<TContext> to form a concrete factory class: class MySqlServerFactory : DesignTimeDbContextFactory{MyDbContext} { protected override OnConfigureDataContextOptions( DbContextOptionsBuilder{MyDbContext} optionsBuilder, IConfiguration configuration ) { var connectionString = configuration[\"MyConnectionString\"]; optionsBuilder.UseSqlServer(connectionString); } } Methods CreateDbContext(String[]) This method is called to create a TContext instance, at design-time. Declaration public virtual TContext CreateDbContext(string[] args) Parameters Type Name Description System.String [] args Optional arguments for the operation. Returns Type Description TContext An instance of TContext . OnConfigureDataContextOptions(DbContextOptionsBuilder<TContext>, IConfiguration) This method is called by the factory to configure the given Microsoft.EntityFrameworkCore.DbContextOptionsBuilder<TContext> object, from the specified object. Declaration protected abstract void OnConfigureDataContextOptions(DbContextOptionsBuilder<TContext> optionsBuilder, IConfiguration configuration) Parameters Type Name Description Microsoft.EntityFrameworkCore.DbContextOptionsBuilder <TContext> optionsBuilder The data-context options builder to use for the operation. IConfiguration configuration The configuration object to use for the operation. Implements Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory<TContext>"
  },
  "api/Microsoft.EntityFrameworkCore.Design.html": {
    "href": "api/Microsoft.EntityFrameworkCore.Design.html",
    "title": "Namespace Microsoft.EntityFrameworkCore.Design",
    "keywords": "Namespace Microsoft.EntityFrameworkCore.Design Classes DesignTimeDbContextFactory<TContext> This class is a base implementation of the Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory<TContext> interface."
  },
  "api/Microsoft.EntityFrameworkCore.html": {
    "href": "api/Microsoft.EntityFrameworkCore.html",
    "title": "Namespace Microsoft.EntityFrameworkCore",
    "keywords": "Namespace Microsoft.EntityFrameworkCore Classes DatabaseFacadeExtensions This class contains extension methods related to the type."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.EntityFrameworkCore.dll contains EFCORE extensions used by other CodeGator pacakges."
  }
}