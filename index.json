{
  "api/CG.Collections.Generic.EnumerableExtensions.html": {
    "href": "api/CG.Collections.Generic.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions",
    "keywords": "Class EnumerableExtensions This class contains extension methods realted to the System.Collections.Generic.IEnumerable<T> type. Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Collections.Generic Assembly : CG.Core.dll Syntax public static class EnumerableExtensions Methods ApplyBlackList<T>(IEnumerable<T>, Func<T, String>, String) This method filters out elements based on the contents of a comma separated black list. Declaration public static IEnumerable<T> ApplyBlackList<T>(this IEnumerable<T> sequence, Func<T, string> selector, string blackList) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to use for the operation. System.Func <T, System.String > selector The selector to apply for the operation. System.String blackList The comma separated black list to use for the operation. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable sequence of T items. Type Parameters Name Description T The type associated with the sequence. Remarks The intent, with this method, is to quickly filter an enumerable sequence by applying a black list to a specific element. So, anything in the sequence that matches the corresponding black list is dropped from the collection. ApplyWhiteList<T>(IEnumerable<T>, Func<T, String>, String) This method filters out elements based on the contents of a comma separated white list. Declaration public static IEnumerable<T> ApplyWhiteList<T>(this IEnumerable<T> sequence, Func<T, string> selector, string whiteList) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to use for the operation. System.Func <T, System.String > selector The selector to apply for the operation. System.String whiteList The comma separated white list to use for the operation. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable sequence of T items. Type Parameters Name Description T The type associated with the sequence. Remarks The intent, with this method, is to quickly filter an enumerable sequence by applying a white list to a specific element. So, anything in the sequence that doesn't match the white list is dropped from the collection. DistinctOn<T, K>(IEnumerable<T>, Func<T, K>) This method returns elements from a sequence that are distinct, on the specified property. Declaration public static IEnumerable<T> DistinctOn<T, K>(this IEnumerable<T> lhs, Func<T, K> rhs) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> lhs The left-hand queryable sequence. System.Func <T, K> rhs The right-hand LINQ expression to select a property. Returns Type Description System.Collections.Generic.IEnumerable <T> An System.Collections.Generic.IEnumerable<T> sequence. Type Parameters Name Description T The type associated with the sequences. K The type associated with the property. ForEach<T>(IEnumerable<T>, Action<T>) This method iterates through an enumerable sequence applying the specified delegate action to each item. Declaration public static void ForEach<T>(this IEnumerable<T> sequence, Action<T> action) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The enumerable sequence to use for the operation. System.Action <T> action The delegate to apply to each item in the sequence. Type Parameters Name Description T The type of object in the sequence. Remarks The intent, with this method, is to quickly enumerate through the items in an enumerable sequence, without setting up the standard .NET foreach loop. Any errors are collected and thrown as a single System.AggregateException object. This approach is not good for all looping scenarios - such as breaking from a loop early, or returning values from a loop, etc. So use your best judgment when deciding to loop this way. Examples This example shows how to call the ForEach<T>(IEnumerable<T>, Action<T>) method. class TestClass { static void Main() { var list = new int[] { 0, 1, 2, 3 }; list.ForEach(x => { Console.Write(x); }); } } Prints: 0123 ForEach<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, Action<T>) This method recursively iterates through an enumerable sequence applying the specified delegate action to each item. Declaration public static void ForEach<T>(this IEnumerable<T> sequence, Func<T, IEnumerable<T>> selector, Action<T> action) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The enumerable sequence to use for the operation. System.Func <T, System.Collections.Generic.IEnumerable <T>> selector The selector for finding child sequences. System.Action <T> action The delegate to apply to each item in the sequence. Type Parameters Name Description T The type of object in the sequence. Remarks The intent, with this method, is to quickly enumerate through the items in an enumerable sequence, without setting up the standard .NET foreach loop. Any errors are collected and thrown as a single System.AggregateException object. This approach is not good for all looping scenarios - such as breaking from a loop early, or returning values from a loop, etc. So use your best judgment when deciding to loop this way. Examples This example shows how to call the ForEach<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, Action<T>) method. class TestClass { class TestType { public int Id { get; set; } public TestType[] C {get; set; } } static void Main() { var list = new TestType[] { new TestType() { Id = 0, C = new TestType[] { new TestType { Id = 1, C = new TestType[0] } } }, new TestType() { Id = 2, C = new TestType[] { new TestType { Id = 3, C = new TestType[0] } } } }; list.ForEach(x => x.C, y => { Console.Write($\"{Id}\"); }); } } Prints: 0123"
  },
  "api/CG.Collections.Generic.html": {
    "href": "api/CG.Collections.Generic.html",
    "title": "Namespace CG.Collections.Generic",
    "keywords": "Namespace CG.Collections.Generic Classes EnumerableExtensions This class contains extension methods realted to the System.Collections.Generic.IEnumerable<T> type. ListExtensions This class contains extension methods related to the System.Collections.Generic.IList<T> type."
  },
  "api/CG.Collections.Generic.ListExtensions.html": {
    "href": "api/CG.Collections.Generic.ListExtensions.html",
    "title": "Class ListExtensions",
    "keywords": "Class ListExtensions This class contains extension methods related to the System.Collections.Generic.IList<T> type. Inheritance System.Object ListExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Collections.Generic Assembly : CG.Core.dll Syntax public static class ListExtensions Methods AddRange<T>(IList<T>, IEnumerable<T>) This method adds the elements of the specified collection to the end of the System.Collections.Generic.IList<T> . Declaration public static void AddRange<T>(this IList<T> list, IEnumerable<T> collection) Parameters Type Name Description System.Collections.Generic.IList <T> list The list to use for the operation. System.Collections.Generic.IEnumerable <T> collection The collection whose elements should be added to the end of the System.Collections.Generic.IEnumerable<T> The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type. Type Parameters Name Description T The type of elements in the list. Remarks The intent, with this method, is to quickly add a range of elements from one list, into another. ForEach<T>(IList<T>, Action<T>) This method iterates through an enumerable sequence applying the specified delegate action to each item. Declaration public static void ForEach<T>(this IList<T> sequence, Action<T> action) Parameters Type Name Description System.Collections.Generic.IList <T> sequence The enumerable sequence to use for the operation. System.Action <T> action The delegate to apply to each item in the sequence. Type Parameters Name Description T The type of object in the sequence. Remarks The intent, with this method, is to quickly enumerate through the items in a list, without setting up the standard .NET foreach loop. Any errors are collected and thrown as a single System.AggregateException object. This approach is not good for all looping scenarios - such as breaking from a loop early, or returning values from a loop, etc. So use your best judgment when deciding to loop this way. Examples This example shows how to call the ForEach<T>(IList<T>, Action<T>) method. class TestClass { static void Main() { var list = new int[] { 0, 1, 2, 3 }; list.ForEach(x => { Console.Write(x); }); } } Prints: 0123 ForEach<T>(IList<T>, Func<T, IEnumerable<T>>, Action<T>) This method recursively iterates through an enumerable sequence applying the specified delegate action to each item. Declaration public static void ForEach<T>(this IList<T> sequence, Func<T, IEnumerable<T>> selector, Action<T> action) Parameters Type Name Description System.Collections.Generic.IList <T> sequence The enumerable sequence to use for the operation. System.Func <T, System.Collections.Generic.IEnumerable <T>> selector The selector for finding child sequences. System.Action <T> action The delegate to apply to each item in the sequence. Type Parameters Name Description T The type of object in the sequence. Remarks The intent, with this method, is to recursively enumerate through the items in a list, without setting up the standard .NET foreach loop. Any errors are collected and thrown as a single System.AggregateException object. This approach is not good for all looping scenarios - such as breaking from a loop early, or returning values from a loop, etc. So use your best judgment when deciding to loop this way. Examples This example shows how to call the ForEach<T>(IList<T>, Func<T, IEnumerable<T>>, Action<T>) method. class TestClass { class TestType { public int Id { get; set; } public TestType[] C {get; set; } } static void Main() { var list = new TestType[] { new TestType() { Id = 0, C = new TestType[] { new TestType { Id = 1, C = new TestType[0] } } }, new TestType() { Id = 2, C = new TestType[] { new TestType { Id = 3, C = new TestType[0] } } } }; list.ForEach(x => x.C, y => { Console.Write($\"{Id}\"); }); } } Prints: 0123 RemoveRange<T>(IList<T>, Int32, Int32) This method removes a range of elements from a System.Collections.Generic.IList<T> list. Declaration public static void RemoveRange<T>(this IList<T> list, int index, int count) Parameters Type Name Description System.Collections.Generic.IList <T> list The list to use for the operation. System.Int32 index The zero-based starting index of the range of elements to remove. System.Int32 count The number of elements to remove. Type Parameters Name Description T The type of elements in the list. Remarks The intent, with this method, is to quickly remove a range of elements from a list."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/System.ActionExtensions.html": {
    "href": "api/System.ActionExtensions.html",
    "title": "Class ActionExtensions",
    "keywords": "Class ActionExtensions This class contains extension methods related to the System.Action type. Inheritance System.Object ActionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public static class ActionExtensions Methods WaitAll(IEnumerable<Action>, Int32, CancellationToken) This method runs the collection of actions while limiting the number that run concurrently to, at most, maxConcurrency . Declaration public static void WaitAll(this IEnumerable<Action> actions, int maxConcurrency, CancellationToken token = null) Parameters Type Name Description IEnumerable < System.Action > actions The collection of actions to run. System.Int32 maxConcurrency The maximum number of actions to run concurrently. A positive value limits the number of concurrent operations to the set value. If it is -1, there is no limit on the number of concurrently running operations. CancellationToken token An optional cancellation token. WhenAll(IEnumerable<Action>, Int32, CancellationToken) This method runs the collection of actions while limiting the number that run concurrently to, at most, maxConcurrency . Declaration public static async Task WhenAll(this IEnumerable<Action> actions, int maxConcurrency, CancellationToken token = null) Parameters Type Name Description IEnumerable < System.Action > actions The collection of actions to run. System.Int32 maxConcurrency The maximum number of actions to run concurrently. A positive value limits the number of concurrent operations to the set value. If it is -1, there is no limit on the number of concurrently running operations. CancellationToken token An optional cancellation token. Returns Type Description Task Remarks A task to perform the oepration."
  },
  "api/System.AppDomainExtensions.html": {
    "href": "api/System.AppDomainExtensions.html",
    "title": "Class AppDomainExtensions",
    "keywords": "Class AppDomainExtensions This class contains extension methods related to the System.AppDomain type. Inheritance System.Object AppDomainExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public static class AppDomainExtensions Methods FriendlyNameEx(AppDomain, Boolean) This method gets the much friendlier name of the app-domain. Declaration public static string FriendlyNameEx(this AppDomain appDomain, bool stripTrailingExtension = false) Parameters Type Name Description System.AppDomain appDomain The app-domain to use for the operation. System.Boolean stripTrailingExtension True to strip any trailing file extension in the friendly name; false otherwise. Returns Type Description System.String The friendly name of this application domain. Exceptions Type Condition System.AppDomainUnloadedException The operation was attempted on an unloaded app-domain."
  },
  "api/System.Collections.GuardExtensions.html": {
    "href": "api/System.Collections.GuardExtensions.html",
    "title": "Class GuardExtensions",
    "keywords": "Class GuardExtensions This class contains extension methods related to the type. Inheritance System.Object GuardExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.Collections Assembly : CG.Core.dll Syntax public static class GuardExtensions Methods ThrowIfEmpty<T>(IGuard, IEnumerable<T>, String, String, String, Int32) This method throws an exception if the argValue argument contains an empty collection. Declaration public static IGuard ThrowIfEmpty<T>(this IGuard guard, IEnumerable<T> argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Collections.IEnumerable <T> argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Type Parameters Name Description T Examples This example shows how to call the ThrowIfEmpty<T>(IGuard, IEnumerable<T>, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new string[0]; // throws an exception, since the argument is invalid. Guard.Instance().ThrowIfEmpty(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains a value that is less than zero."
  },
  "api/System.Collections.html": {
    "href": "api/System.Collections.html",
    "title": "Namespace System.Collections",
    "keywords": "Namespace System.Collections Classes GuardExtensions This class contains extension methods related to the type."
  },
  "api/System.Diagnostics.html": {
    "href": "api/System.Diagnostics.html",
    "title": "Namespace System.Diagnostics",
    "keywords": "Namespace System.Diagnostics Classes ObjectExtensions This class contains extension methods related to the System.Object type."
  },
  "api/System.Diagnostics.ObjectExtensions.html": {
    "href": "api/System.Diagnostics.ObjectExtensions.html",
    "title": "Class ObjectExtensions",
    "keywords": "Class ObjectExtensions This class contains extension methods related to the System.Object type. Inheritance System.Object ObjectExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.Diagnostics Assembly : CG.Core.dll Syntax public static class ObjectExtensions Methods GetFieldValue(Object, String, Boolean) This method reads a field value from the specified object. Declaration public static object GetFieldValue(this object obj, string fieldName, bool includeProtected = false) Parameters Type Name Description System.Object obj The object to use for the operation. System.String fieldName The field to use for the operation. System.Boolean includeProtected Determines if protected fields are included in the search. Returns Type Description System.Object The value of the field. Remarks The idea, with this method, is to use reflection to go find and return a field value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. GetFieldValue<T>(Object, String, Boolean) This method reads a field value from the specified object. Declaration public static T GetFieldValue<T>(this object obj, string fieldName, bool includeProtected = false) where T : class Parameters Type Name Description System.Object obj The object to use for the operation. System.String fieldName The field to use for the operation. System.Boolean includeProtected Determines if protected fields are included in the search. Returns Type Description T The value of the field. Type Parameters Name Description T The type of the field. Remarks The idea, with this method, is to use reflection to go find and return a field value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. GetPropertyValue(Object, String, Boolean) This method reads a property value from the specified object. Declaration public static object GetPropertyValue(this object obj, string propertyName, bool includeProtected = false) Parameters Type Name Description System.Object obj The object to use for the operation. System.String propertyName The property to use for the operation. System.Boolean includeProtected Determines if protected properties are included in the search. Returns Type Description System.Object The value of the property. Remarks The idea, with this method, is to use reflection to go find and return a property value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. GetPropertyValue<T>(Object, String, Boolean) This method reads a property value from the specified object. Declaration public static T GetPropertyValue<T>(this object obj, string propertyName, bool includeProtected = false) where T : class Parameters Type Name Description System.Object obj The object to use for the operation. System.String propertyName The property to use for the operation. System.Boolean includeProtected Determines if protected properties are included in the search. Returns Type Description T The value of the property. Type Parameters Name Description T The type of the property. Remarks The idea, with this method, is to use reflection to go find and return a property value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. SetFieldValue(Object, String, Object, Boolean) This method writes a field value for the specified object. Declaration public static void SetFieldValue(this object obj, string fieldName, object value, bool includeProtected = false) Parameters Type Name Description System.Object obj The object to use for the operation. System.String fieldName The field to use for the operation. System.Object value The value to use for the operation. System.Boolean includeProtected Determines if protected fields are included in the search. Remarks The idea, with this method, is to use reflection to go find a field on an object and set the value at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. SetPropertyValue(Object, String, Object, Boolean) This method writes a property value on the specified object. Declaration public static void SetPropertyValue(this object obj, string propertyName, object value, bool includeProtected = false) Parameters Type Name Description System.Object obj The object to use for the operation. System.String propertyName The property to use for the operation. System.Object value The value to use for the operation. System.Boolean includeProtected Determines if protected properties are included in the search. Remarks The idea, with this method, is to use reflection to go find a property on an object and set the value at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) This method reads a field specified by a LINQ expression and returns the value. The linq expression can have nested elements and limited inline method calls, such as: x => x.A.B.C[2]._myField; Declaration public static bool TryGetFieldValue<TSource, TFld>(this TSource source, Expression<Func<TSource, TFld>> selector, out TFld value) Parameters Type Name Description TSource source The source object to use for the operation. Expression < System.Func <TSource, TFld>> selector The LINQ expression to use for the operation. TFld value The value from the specified field. Returns Type Description System.Boolean True if the field was read; false otherwise. Type Parameters Name Description TSource The type of source object. TFld The type of field. Remarks The idea, with this method, is to use reflection to go find and return a field value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing. TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) This method reads a property specified by a LINQ expression and returns the value. The linq expression can have nested elements and limited inline method calls, such as: x => x.A.B.C[2].MyProperty; Declaration public static bool TryGetPropertyValue<TSource, TProp>(this TSource source, Expression<Func<TSource, TProp>> selector, out TProp value) Parameters Type Name Description TSource source The source object to use for the operation. Expression < System.Func <TSource, TProp>> selector The LINQ expression to use for the operation. TProp value The value from the specified property. Returns Type Description System.Boolean True if the property was read; false otherwise. Type Parameters Name Description TSource The type of source object. TProp The type of property. Remarks The idea, with this method, is to use reflection to go find and return a property value from an object at runtime. The intent is to use this sparingly because the performance isn't great. I see this approach as something useful for things like unit testing."
  },
  "api/System.DisposableBase.html": {
    "href": "api/System.DisposableBase.html",
    "title": "Class DisposableBase",
    "keywords": "Class DisposableBase This class is a base implementation of the standard .NET \"disposable pattern\". Inheritance System.Object DisposableBase Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public abstract class DisposableBase : IDisposable Remarks The idea, with this class, is to reduce the amount of clutter created by implementing the System.IDisposable interface on a class. Of course, this approach only works where inheritance is a possibility. Still, it's better than repetitively following the .NET \"disposable pattern\" in every class that implements System.IDisposable . Examples This example demonstrates how to derive from DisposableBase and write your own cleanup code. class MyClass : DisposableBase { protected void override Dispose(bool disposing) { // TODO : write your cleanup code here. base.Dispose(disposing); } } Properties IsDisposed This property contains a flag that indicates whether the object has been disposed of. Declaration protected bool IsDisposed { get; } Property Value Type Description System.Boolean Methods Dispose(Boolean) This method is called when the object is disposed. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to dispose of managed resources; false otherwise. Explicit Interface Implementations IDisposable.Dispose() This method performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ObjectExtensions.QuickClone(Object, Type) ObjectExtensions.QuickClone<T>(T) ObjectExtensions.QuickCopyTo(Object, Object) ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/System.ExceptionExtensions.html": {
    "href": "api/System.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions",
    "keywords": "Class ExceptionExtensions This class contains extension methods related to the System.Exception type. Inheritance System.Object ExceptionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public static class ExceptionExtensions Methods GetCallerInfo(Exception, out String, out String, out Int32) This method returns arguments from the calling method. Declaration public static bool GetCallerInfo(this Exception ex, out string memberName, out string sourceFilePath, out int sourceLineNumber) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.String memberName The method generated the exception. System.String sourceFilePath The source file that generated the exception. System.Int32 sourceLineNumber The source line that generated the exception. Returns Type Description System.Boolean True if the data was found; false otherwise. GetDateTime(Exception, out DateTime) This method returns the date/time the exception was thrown. Declaration public static bool GetDateTime(this Exception ex, out DateTime dateTime) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.DateTime dateTime The date/time when the exception was thrown. Returns Type Description System.Boolean True if the data was found; false otherwise. GetMachineName(Exception, out String) This method returns the name of the machiune that threw the exception. Declaration public static bool GetMachineName(this Exception ex, out string machineName) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.String machineName The name of the machine that threw the exception. Returns Type Description System.Boolean True if the data was found; false otherwise. GetMethodArguments(Exception, out (String, Object)[]) This method returns arguments from the calling method. Declaration public static bool GetMethodArguments(this Exception ex, out (string, object)[] methodArgs) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.ValueTuple < System.String , System.Object >[] methodArgs The collection of method arguments for the method that created the exception. Returns Type Description System.Boolean True if the data was found; false otherwise. GetOriginator(Exception, out String) This method returns the name of the originator to the exception. Declaration public static bool GetOriginator(this Exception ex, out string originator) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.String originator The name of the component, or class, or object, that originally threw the exception. Returns Type Description System.Boolean True if the data was found; false otherwise. MessageEx(Exception, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) This method formats and returns an extended message for an exception by adding various optional sections to the standard System.Exception.Message property. Declaration public static string MessageEx(this Exception ex, bool includeType = false, bool includeInnerExceptions = false, bool includeStackTrace = false, bool includeSource = false, bool includeHelpLink = false, bool includeHResult = false, bool includeData = false, bool includeMachineName = false, bool includeUserName = false, bool includeExtras = false) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.Boolean includeType True to include the type of exception; false otherwise. System.Boolean includeInnerExceptions True to include messages from any inner exceptions; false otherwise. System.Boolean includeStackTrace True to include a stack trace from the exception; false otherwise. System.Boolean includeSource True to include the source from the exception; false otherwise. System.Boolean includeHelpLink True to include th help link from the exception; false otherwise. System.Boolean includeHResult True to include the HRESULT from the exception; false otherwise. System.Boolean includeData True to include the data from the exception; false otherwise. System.Boolean includeMachineName True to include the machine name along with the exception; false otherwise. System.Boolean includeUserName True to include the user name along with the exception; false otherwise. System.Boolean includeExtras True to include common properties that usually contain extra information related to the exception; false otherwise. Returns Type Description System.String A formatted message string. SetCallerInfo(Exception, String, String, Int32) This method adds information about the calling method to the exception. Declaration public static Exception SetCallerInfo(this Exception ex, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description System.Exception The value of the ex parameters, for chaining calls together. SetDateTime(Exception) This method adds a date/time stamp to the exception. Declaration public static Exception SetDateTime(this Exception ex) Parameters Type Name Description System.Exception ex The exception to use for the operation. Returns Type Description System.Exception The value of the ex parameters, for chaining calls together. SetMachineName(Exception) This method adds the name of the machine that threw the exception. Declaration public static Exception SetMachineName(this Exception ex) Parameters Type Name Description System.Exception ex The exception to use for the operation. Returns Type Description System.Exception The value of the ex parameters, for chaining calls together. SetMethodArguments(Exception, (String, Object)[]) This method adds arguments from the calling method to the exception. Declaration public static Exception SetMethodArguments(this Exception ex, params (string, object)[] args) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.ValueTuple < System.String , System.Object >[] args The arguments to use for the operation. Returns Type Description System.Exception The value of the ex parameters, for chaining calls together. SetOriginator(Exception, String) This method adds the name of the originator to the exception. Declaration public static Exception SetOriginator(this Exception ex, string originator) Parameters Type Name Description System.Exception ex The exception to use for the operation. System.String originator The name of the component, or class, or object, that originally threw the exception. Returns Type Description System.Exception The value of the ex parameters, for chaining calls together."
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System",
    "keywords": "Namespace System Classes ActionExtensions This class contains extension methods related to the System.Action type. AppDomainExtensions This class contains extension methods related to the System.AppDomain type. DisposableBase This class is a base implementation of the standard .NET \"disposable pattern\". ExceptionExtensions This class contains extension methods related to the System.Exception type. NumberExtensions This class contains extension methods related to the System.String type. ObjectExtensions This class contains extension methods related to the System.Object type. RandomEx This class represents a random number generator with a (slightly) better default seed generator. RandomExtensions This class contains extension methods related to the System.Random type. SingletonBase<T> This class is a base implementation of the singleton pattern. StringExtensions This class contains extension methods related to the System.String type. TypeExtensions This class contains extension methods related to the System.Type type."
  },
  "api/System.IO.GuardExtensions.html": {
    "href": "api/System.IO.GuardExtensions.html",
    "title": "Class GuardExtensions",
    "keywords": "Class GuardExtensions This class contains extension methods related to the type. Inheritance System.Object GuardExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.IO Assembly : CG.Core.dll Syntax public static class GuardExtensions Methods ThrowIfInvalidFileExtension(IGuard, String, String, String, String, Int32) This method throws an exception if the argValue argument contains an invalid file extension. Declaration public static IGuard ThrowIfInvalidFileExtension(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard instance to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfInvalidFileExtension(IGuard, String, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = \"*\"; // throws an exception, since the file extension is invalid. Guard.Instance().ThrowIfInvalidFolderPath(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains an invalid file extension. ThrowIfInvalidFilePath(IGuard, String, String, String, String, Int32) This method throws an exception if the argValue argument contains an invalid file path. Declaration public static IGuard ThrowIfInvalidFilePath(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard instance to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfInvalidFilePath(IGuard, String, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = \"*\"; // throws an exception, since the file path is invalid. Guard.Instance().ThrowIfInvalidFilePath(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains an invalid file path. ThrowIfInvalidFolderPath(IGuard, String, String, String, String, Int32) This method throws an exception if the argValue argument contains an invalid folder path. Declaration public static IGuard ThrowIfInvalidFolderPath(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard instance to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfInvalidFolderPath(IGuard, String, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = \"*\"; // throws an exception, since the folder path is invalid. Guard.Instance().ThrowIfInvalidFolderPath(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains an invalid folder path. ThrowIfNotReadable(IGuard, Stream, String, String, String, Int32) This method throws an exception if the argValue argument contains a value that is not a readable stream. Declaration public static IGuard ThrowIfNotReadable(this IGuard guard, Stream argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard instance to use for the operation. System.IO.Stream argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfNotReadable(IGuard, Stream, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new FileStream(\"test.doc\", FileMode.Open, FileAccess.Write); // throws an exception, since the stream is not readable. Guard.Instance().ThrowIfNotReadable(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains a stream that is not readable. ThrowIfNotWritable(IGuard, Stream, String, String, String, Int32) This method throws an exception if the argValue argument contains a value that is not a writable stream. Declaration public static IGuard ThrowIfNotWritable(this IGuard guard, Stream argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard instance to use for the operation. System.IO.Stream argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfNotWritable(IGuard, Stream, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new FileStream(\"test.doc\", FileMode.Open, FileAccess.Read); // throws an exception, since the stream is not writeable. Guard.Instance().ThrowIfNotWritable(arg, nameof(arg)); } } Exceptions Type Condition System.ArgumentException This exception is thrown when the argValue argument contains a stream that is not writable."
  },
  "api/System.IO.html": {
    "href": "api/System.IO.html",
    "title": "Namespace System.IO",
    "keywords": "Namespace System.IO Classes GuardExtensions This class contains extension methods related to the type. StringStream This class is a string based implementation of System.IO.MemoryStream . TemporaryStream This class is a temporary implementation of System.IO.Stream backed by a temporary disk file."
  },
  "api/System.IO.StringStream.html": {
    "href": "api/System.IO.StringStream.html",
    "title": "Class StringStream",
    "keywords": "Class StringStream This class is a string based implementation of System.IO.MemoryStream . Inheritance System.Object System.MarshalByRefObject System.IO.Stream System.IO.MemoryStream StringStream Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.MemoryStream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.MemoryStream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.MemoryStream.CopyTo(System.IO.Stream, System.Int32) System.IO.MemoryStream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.MemoryStream.Dispose(System.Boolean) System.IO.MemoryStream.EndRead(System.IAsyncResult) System.IO.MemoryStream.EndWrite(System.IAsyncResult) System.IO.MemoryStream.Flush() System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken) System.IO.MemoryStream.GetBuffer() System.IO.MemoryStream.Read(System.Byte[], System.Int32, System.Int32) System.IO.MemoryStream.Read(System.Span<System.Byte>) System.IO.MemoryStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.MemoryStream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.MemoryStream.ReadByte() System.IO.MemoryStream.Seek(System.Int64, System.IO.SeekOrigin) System.IO.MemoryStream.SetLength(System.Int64) System.IO.MemoryStream.ToArray() System.IO.MemoryStream.TryGetBuffer(System.ArraySegment<System.Byte>) System.IO.MemoryStream.Write(System.Byte[], System.Int32, System.Int32) System.IO.MemoryStream.Write(System.ReadOnlySpan<System.Byte>) System.IO.MemoryStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.MemoryStream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.MemoryStream.WriteByte(System.Byte) System.IO.MemoryStream.WriteTo(System.IO.Stream) System.IO.MemoryStream.CanRead System.IO.MemoryStream.CanSeek System.IO.MemoryStream.CanWrite System.IO.MemoryStream.Capacity System.IO.MemoryStream.Length System.IO.MemoryStream.Position System.IO.Stream.Null System.IO.Stream.Close() System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.DisposeAsync() System.IO.Stream.FlushAsync() System.IO.Stream.ObjectInvariant() System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.ValidateBufferArguments(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ValidateCopyToArguments(System.IO.Stream, System.Int32) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.IO Assembly : CG.Core.dll Syntax public class StringStream : MemoryStream, IAsyncDisposable, IDisposable Constructors StringStream(String) This constructor creates a new instance of the StringStream class. Declaration public StringStream(string value) Parameters Type Name Description System.String value The value for the stream. Implements System.IAsyncDisposable System.IDisposable Extension Methods ObjectExtensions.QuickClone(Object, Type) ObjectExtensions.QuickClone<T>(T) ObjectExtensions.QuickCopyTo(Object, Object) ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/System.IO.TemporaryStream.html": {
    "href": "api/System.IO.TemporaryStream.html",
    "title": "Class TemporaryStream",
    "keywords": "Class TemporaryStream This class is a temporary implementation of System.IO.Stream backed by a temporary disk file. Inheritance System.Object System.MarshalByRefObject System.IO.Stream TemporaryStream Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.Close() System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.FlushAsync(System.Threading.CancellationToken) System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.ValidateBufferArguments(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ValidateCopyToArguments(System.IO.Stream, System.Int32) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.IO Assembly : CG.Core.dll Syntax public class TemporaryStream : Stream, IAsyncDisposable, IDisposable Remarks The idea, with this class, is to create a temporary stream mapped to an equally temporary backing store. In this case, a temp file. So, this is good to use when you only need storage for a short period of time. It's not good if you want the information to stick around since temp files really aren't guaranteed to live for any set period of time. Constructors TemporaryStream(String) This constructor creates a new instance of the TemporaryStream class. Declaration public TemporaryStream(string ext = \".tmp\") Parameters Type Name Description System.String ext An optional extension for the underlying disk file. Properties BaseStream This property contains a reference to a base stream. Declaration protected FileStream BaseStream { get; } Property Value Type Description System.IO.FileStream CanRead This property gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead CanSeek This property gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek CanWrite This property gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite Length This property gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length Name This property contains the name of the underlying base stream. Declaration public string Name { get; } Property Value Type Description System.String Position This property gets or sets the current position of this stream. Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods Dispose(Boolean) This method releases the unmanaged resources used by the System.IO.FileStream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides System.IO.Stream.Dispose(System.Boolean) Flush() This method clears buffers for this stream and causes any buffered data to be written to the underlying storage. Declaration public override void Flush() Overrides System.IO.Stream.Flush() Read(Byte[], Int32, Int32) This method reads a block of bytes from the stream and writes the data in a given buffer. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. System.Int32 offset The byte offset in array at which the read bytes will be placed. System.Int32 count The maximum number of bytes to read. Returns Type Description System.Int32 The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) Seek(Int64, SeekOrigin) This method sets the current position of this stream to the given value. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset The point relative to origin from which to begin seeking. System.IO.SeekOrigin origin Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type System.IO.SeekOrigin. Returns Type Description System.Int64 The new position in the stream. Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) SetLength(Int64) This method sets the length of this stream to the given value. Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value The new length of the stream. Overrides System.IO.Stream.SetLength(System.Int64) Write(Byte[], Int32, Int32) This method writes a block of bytes to the file stream. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer containing data to write to the stream. System.Int32 offset The zero-based byte offset in array from which to begin copying bytes to the stream. System.Int32 count The maximum number of bytes to write. Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) Implements System.IAsyncDisposable System.IDisposable Extension Methods ObjectExtensions.QuickClone(Object, Type) ObjectExtensions.QuickClone<T>(T) ObjectExtensions.QuickCopyTo(Object, Object) ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/System.NumberExtensions.html": {
    "href": "api/System.NumberExtensions.html",
    "title": "Class NumberExtensions",
    "keywords": "Class NumberExtensions This class contains extension methods related to the System.String type. Inheritance System.Object NumberExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public static class NumberExtensions Methods FormattedAsBytes(Double, Int32) This method formats the specified value as bytes. Declaration public static string FormattedAsBytes(this double value, int decimalPlaces = 1) Parameters Type Name Description System.Double value The value to use for the operation. System.Int32 decimalPlaces The number of decimal places to use for the operation. Returns Type Description System.String A formatted string. FormattedAsBytes(Int16, Int32) This method formats the specified value as bytes. Declaration public static string FormattedAsBytes(this short value, int decimalPlaces = 1) Parameters Type Name Description System.Int16 value The value to use for the operation. System.Int32 decimalPlaces The number of decimal places to use for the operation. Returns Type Description System.String A formatted string. FormattedAsBytes(Int32, Int32) This method formats the specified value as bytes. Declaration public static string FormattedAsBytes(this int value, int decimalPlaces = 1) Parameters Type Name Description System.Int32 value The value to use for the operation. System.Int32 decimalPlaces The number of decimal places to use for the operation. Returns Type Description System.String A formatted string. FormattedAsBytes(Int64, Int32) This method formats the specified value as bytes. Declaration public static string FormattedAsBytes(this long value, int decimalPlaces = 1) Parameters Type Name Description System.Int64 value The value to use for the operation. System.Int32 decimalPlaces The number of decimal places to use for the operation. Returns Type Description System.String A formatted string. FormattedAsBytes(Single, Int32) This method formats the specified value as bytes. Declaration public static string FormattedAsBytes(this float value, int decimalPlaces = 1) Parameters Type Name Description System.Single value The value to use for the operation. System.Int32 decimalPlaces The number of decimal places to use for the operation. Returns Type Description System.String A formatted string."
  },
  "api/System.ObjectExtensions.html": {
    "href": "api/System.ObjectExtensions.html",
    "title": "Class ObjectExtensions",
    "keywords": "Class ObjectExtensions This class contains extension methods related to the System.Object type. Inheritance System.Object ObjectExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public static class ObjectExtensions Methods QuickClone(Object, Type) This method performs a quick clone of the specified object. Declaration public static object QuickClone(this object source, Type sourceType) Parameters Type Name Description System.Object source The object to be cloned. System.Type sourceType The type of the object to be cloned. Returns Type Description System.Object The cloned object. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are invalid, or missing. QuickClone<T>(T) This method performs a quick clone of the specified object. Declaration public static T QuickClone<T>(this T source) where T : class Parameters Type Name Description T source The object to be cloned. Returns Type Description T The cloned object. Type Parameters Name Description T The type of object to be cloned. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are invalid, or missing. QuickCopyTo(Object, Object) This method performs a quick copy from the source object to the destination object. Declaration public static void QuickCopyTo(this object source, object dest) Parameters Type Name Description System.Object source The object to read from. System.Object dest The object to write to. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are invalid, or missing."
  },
  "api/System.RandomEx.html": {
    "href": "api/System.RandomEx.html",
    "title": "Class RandomEx",
    "keywords": "Class RandomEx This class represents a random number generator with a (slightly) better default seed generator. Inheritance System.Object System.Random RandomEx Inherited Members System.Random.Next() System.Random.Next(System.Int32) System.Random.Next(System.Int32, System.Int32) System.Random.NextInt64() System.Random.NextInt64(System.Int64) System.Random.NextInt64(System.Int64, System.Int64) System.Random.NextBytes(System.Byte[]) System.Random.NextBytes(System.Span<System.Byte>) System.Random.NextSingle() System.Random.NextDouble() System.Random.Sample() System.Random.Shared System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public class RandomEx : Random Constructors RandomEx() This constructor creates a new instance of the RandomEx class. Declaration public RandomEx() RandomEx(Int32) This constructor creates a new instance of the RandomEx class. Declaration public RandomEx(int seed) Parameters Type Name Description System.Int32 seed The seed value to use for the operation. Extension Methods ObjectExtensions.QuickClone(Object, Type) ObjectExtensions.QuickClone<T>(T) ObjectExtensions.QuickCopyTo(Object, Object) RandomExtensions.NextString(Random, Int32) ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/System.RandomExtensions.html": {
    "href": "api/System.RandomExtensions.html",
    "title": "Class RandomExtensions",
    "keywords": "Class RandomExtensions This class contains extension methods related to the System.Random type. Inheritance System.Object RandomExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public static class RandomExtensions Methods NextString(Random, Int32) This method generates a string of pseudo random alphanumeric characters. Declaration public static string NextString(this Random random, int size) Parameters Type Name Description System.Random random The random number generator to use for the operation. System.Int32 size The number of characters to include in the string. Returns Type Description System.String A pseudo random alphanumeric string. Remarks Do NOT use this method for cryptographic purposes. Examples This example shows how to call the NextString(Random, Int32) method. class TestClass { static void Main() { var random = new Random(); var str = random.NextString(10); // str contains a 10 character string. } }"
  },
  "api/System.Reflection.AssemblyExtensions.html": {
    "href": "api/System.Reflection.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions",
    "keywords": "Class AssemblyExtensions This class contains extension methods related to the System.Reflection.Assembly type. Inheritance System.Object AssemblyExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.Reflection Assembly : CG.Core.dll Syntax public static class AssemblyExtensions Methods ReadFileVersion(Assembly) Reads the value of the System.Reflection.AssemblyFileVersionAttribute attribute for the given assembly. Declaration public static string ReadFileVersion(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to read from. Returns Type Description System.String The value of the given assembly's file version attribute."
  },
  "api/System.Reflection.html": {
    "href": "api/System.Reflection.html",
    "title": "Namespace System.Reflection",
    "keywords": "Namespace System.Reflection Classes AssemblyExtensions This class contains extension methods related to the System.Reflection.Assembly type."
  },
  "api/System.Security.Claims.ClaimsPrincipalExtensions.html": {
    "href": "api/System.Security.Claims.ClaimsPrincipalExtensions.html",
    "title": "Class ClaimsPrincipalExtensions",
    "keywords": "Class ClaimsPrincipalExtensions This class contains extension methods related to the System.Security.Claims.ClaimsPrincipal type. Inheritance System.Object ClaimsPrincipalExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.Security.Claims Assembly : CG.Core.dll Syntax public static class ClaimsPrincipalExtensions Methods GetEmail(ClaimsPrincipal) This method returns the value of the email claim, if it exists, in the specified System.Security.Claims.ClaimsPrincipal object. Declaration public static string GetEmail(this ClaimsPrincipal principal) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal principal The claims to use for the operation. Returns Type Description System.String The value of the claim, or an empty string, if the claim wasn't found on the principal. GetName(ClaimsPrincipal) This method returns the value of the name claim, if it exists, in the specified System.Security.Claims.ClaimsPrincipal object. Declaration public static string GetName(this ClaimsPrincipal claimsPrincipal) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal claimsPrincipal The principal to use for the operation. Returns Type Description System.String The value of the claim, or an empty string, if the claim wasn't found on the principal. GetNameIdentifier(ClaimsPrincipal) This method returns the value of the name identifier claim, if it exists, in the specified System.Security.Claims.ClaimsPrincipal object. Declaration public static string GetNameIdentifier(this ClaimsPrincipal claimsPrincipal) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal claimsPrincipal The principal to use for the operation. Returns Type Description System.String The value of the claim, or an empty string, if the claim wasn't found on the principal. GetNickName(ClaimsPrincipal) This method returns the value of the nickname claim, if it exists, in the specified System.Security.Claims.ClaimsPrincipal object. Declaration public static string GetNickName(this ClaimsPrincipal claimsPrincipal) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal claimsPrincipal The principal to use for the operation. Returns Type Description System.String The value of the claim, or an empty string, if the claim wasn't found on the principal. GetPicture(ClaimsPrincipal) This method returns the value of the picture claim, if it exists, in the specified System.Security.Claims.ClaimsPrincipal object. Declaration public static string GetPicture(this ClaimsPrincipal claimsPrincipal) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal claimsPrincipal The principal to use for the operation. Returns Type Description System.String The value of the claim, or an empty string, if the claim wasn't found on the principal."
  },
  "api/System.Security.Claims.html": {
    "href": "api/System.Security.Claims.html",
    "title": "Namespace System.Security.Claims",
    "keywords": "Namespace System.Security.Claims Classes ClaimsPrincipalExtensions This class contains extension methods related to the System.Security.Claims.ClaimsPrincipal type."
  },
  "api/System.Security.Cryptography.html": {
    "href": "api/System.Security.Cryptography.html",
    "title": "Namespace System.Security.Cryptography",
    "keywords": "Namespace System.Security.Cryptography Classes RandomNumberGeneratorExtensions This class contains extension methods related to the System.Security.Cryptography.RandomNumberGenerator type. StringExtensions This class contains extension methods related to the System.String type."
  },
  "api/System.Security.Cryptography.RandomNumberGeneratorExtensions.html": {
    "href": "api/System.Security.Cryptography.RandomNumberGeneratorExtensions.html",
    "title": "Class RandomNumberGeneratorExtensions",
    "keywords": "Class RandomNumberGeneratorExtensions This class contains extension methods related to the System.Security.Cryptography.RandomNumberGenerator type. Inheritance System.Object RandomNumberGeneratorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.Security.Cryptography Assembly : CG.Core.dll Syntax public static class RandomNumberGeneratorExtensions Methods Next(RandomNumberGenerator) This method returns a random integer value. Declaration public static int Next(this RandomNumberGenerator random) Parameters Type Name Description System.Security.Cryptography.RandomNumberGenerator random The random number generator to use for the operation. Returns Type Description System.Int32 A random integer value Examples This example shows how to call the Next(RandomNumberGenerator) method. class TestClass { static void Main() { var random = RandomNumberGenerator.Create(); var num = random.Next(); // num contains a number. } } Next(RandomNumberGenerator, Int32, Int32) This method returns a random integer who's value has been constrained to be within the range specified by the min and max parameters. Declaration public static int Next(this RandomNumberGenerator random, int min, int max) Parameters Type Name Description System.Security.Cryptography.RandomNumberGenerator random The random number generator to use for the operation. System.Int32 min The lower value for the range. System.Int32 max The upper value for the range. Returns Type Description System.Int32 A randon integer who's value has been constrained to be within the range specified by the min and max parameters. Examples This example shows how to call the Next(RandomNumberGenerator, Int32, Int32) method. class TestClass { static void Main() { var random = RandomNumberGenerator.Create(); var num = random.Next(1, 10); // num contains a number between 1 and 10. } } NextDigits(RandomNumberGenerator, Int32) This method returns a random numeric value. Declaration public static string NextDigits(this RandomNumberGenerator random, int size) Parameters Type Name Description System.Security.Cryptography.RandomNumberGenerator random The random number generator to use for the operation. System.Int32 size The number of characters to include in the string. Returns Type Description System.String A random numeric string. Examples This example shows how to call the NextDigits(RandomNumberGenerator, Int32) method. class TestClass { static void Main() { var random = RandomNumberGenerator.Create(); var num = random.NextDigits(3); // num contains random numbers. } } NextLower(RandomNumberGenerator, Int32) This method returns a string with lower case alpha characters. Declaration public static string NextLower(this RandomNumberGenerator random, int size) Parameters Type Name Description System.Security.Cryptography.RandomNumberGenerator random The random number generator to use for the operation. System.Int32 size The number of characters to include in the string. Returns Type Description System.String A random alpha string. Examples This example shows how to call the NextLower(RandomNumberGenerator, Int32) method. class TestClass { static void Main() { var random = RandomNumberGenerator.Create(); var num = random.NextLower(3); // num contains random lower case alpha characters. } } NextString(RandomNumberGenerator, Int32) This method generates a string of random alphanumeric characters. Declaration public static string NextString(this RandomNumberGenerator random, int size) Parameters Type Name Description System.Security.Cryptography.RandomNumberGenerator random The random number generator to use for the operation. System.Int32 size The number of characters to include in the string. Returns Type Description System.String A random alphanumeric string. Examples This example shows how to call the NextString(RandomNumberGenerator, Int32) method. class TestClass { static void Main() { var random = RandomNumberGenerator.Create(); var str = random.NextString(10); // str contains a 10 character string. } } NextSymbols(RandomNumberGenerator, Int32) This method returns a string with random symbols. Declaration public static string NextSymbols(this RandomNumberGenerator random, int size) Parameters Type Name Description System.Security.Cryptography.RandomNumberGenerator random The random number generator to use for the operation. System.Int32 size The number of symbols to include in the string. Returns Type Description System.String A random symbolic string. Examples This example shows how to call the NextSymbols(RandomNumberGenerator, Int32) method. class TestClass { static void Main() { var random = RandomNumberGenerator.Create(); var num = random.NextSymbols(3); // num contains random symbols. } } NextUpper(RandomNumberGenerator, Int32) This method returns a string with upper case alpha characters. Declaration public static string NextUpper(this RandomNumberGenerator random, int size) Parameters Type Name Description System.Security.Cryptography.RandomNumberGenerator random The random number generator to use for the operation. System.Int32 size The number of characters to include in the string. Returns Type Description System.String A random alpha string. Examples This example shows how to call the NextUpper(RandomNumberGenerator, Int32) method. class TestClass { static void Main() { var random = RandomNumberGenerator.Create(); var num = random.NextUpper(3); // num contains random upper case alpha characters. } } Shuffle(RandomNumberGenerator, String) This method returns a string with randomly shuffled characters. Declaration public static string Shuffle(this RandomNumberGenerator random, string source) Parameters Type Name Description System.Security.Cryptography.RandomNumberGenerator random The random number generator to use for the operation. System.String source The string to be shuffled. Returns Type Description System.String A shuffled string. Examples This example shows how to call the Shuffle(RandomNumberGenerator, String) method. class TestClass { static void Main() { var random = RandomNumberGenerator.Create(); var str = random.Shuffle(\"this is a test\"); // str contains randomly shuffled characters. } }"
  },
  "api/System.Security.Cryptography.StringExtensions.html": {
    "href": "api/System.Security.Cryptography.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions This class contains extension methods related to the System.String type. Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.Security.Cryptography Assembly : CG.Core.dll Syntax public static class StringExtensions Methods ToSha256(String) This method calculates an SHA256 hash for the given string. Declaration public static string ToSha256(this string value) Parameters Type Name Description System.String value The value to be hashed. Returns Type Description System.String The SHA256 hash for the value parameter. ToSha512(String) This method calculates an SHA512 hash for the given string. Declaration public static string ToSha512(this string value) Parameters Type Name Description System.String value The value to be hashed. Returns Type Description System.String The SHA512 hash for the value parameter."
  },
  "api/System.SingletonBase-1.html": {
    "href": "api/System.SingletonBase-1.html",
    "title": "Class SingletonBase<T>",
    "keywords": "Class SingletonBase<T> This class is a base implementation of the singleton pattern. Inheritance System.Object SingletonBase<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public abstract class SingletonBase<T> where T : SingletonBase<T> Type Parameters Name Description T The type associated with the derived class. Fields _instance This field contains the singleton instance. Declaration protected static T _instance Field Value Type Description T Methods Instance() This method creates a new singleton instance of the T type. Declaration public static T Instance() Returns Type Description T The singleton instance of T Examples The following example illustrates how to create a singleton instance of the MyClass type: Given the following concrete type: class MyClass : SingletonBase<MyClass> { private MyClass() {} // This private ctor is important! } A singleton instance can be created using the Instance() method: void MyTest() { // This creates a singleton instance of MyClass. MyClass instance = MyClass.Instance(); } Exceptions Type Condition System.MissingMethodException This exception is thrown if the type T is missing it's private ctor. Extension Methods ObjectExtensions.QuickClone(Object, Type) ObjectExtensions.QuickClone<T>(T) ObjectExtensions.QuickCopyTo(Object, Object) ObjectExtensions.TryGetFieldValue<TSource, TFld>(TSource, Expression<Func<TSource, TFld>>, out TFld) ObjectExtensions.TryGetPropertyValue<TSource, TProp>(TSource, Expression<Func<TSource, TProp>>, out TProp) ObjectExtensions.GetFieldValue(Object, String, Boolean) ObjectExtensions.GetFieldValue<T>(Object, String, Boolean) ObjectExtensions.SetFieldValue(Object, String, Object, Boolean) ObjectExtensions.GetPropertyValue(Object, String, Boolean) ObjectExtensions.GetPropertyValue<T>(Object, String, Boolean) ObjectExtensions.SetPropertyValue(Object, String, Object, Boolean)"
  },
  "api/System.StringExtensions.html": {
    "href": "api/System.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions This class contains extension methods related to the System.String type. Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public static class StringExtensions Methods HammingDistance(String, String) This method calculates a hamming distance between two strings. Declaration public static int HammingDistance(this string lhs, string rhs) Parameters Type Name Description System.String lhs The left hand side of the operation. System.String rhs The right hand side of the operation. Returns Type Description System.Int32 A hamming distance. IsHTML(String) This method checks for embedded HTML in a string. Declaration public static bool IsHTML(this string value) Parameters Type Name Description System.String value The string to use for the operation. Returns Type Description System.Boolean True if the string contains HTML; false otherwise. IsMatch(String, String) This method compares two strings and returns true if they match; false if they don't. The acceptable wild card symbols are: * to match zero or more characters, or, ? to match a single character. Declaration public static bool IsMatch(this string lhs, string rhs) Parameters Type Name Description System.String lhs The left hand side of the operation. System.String rhs The right hand side of the operation. Returns Type Description System.Boolean The results of the comparison. Examples This example shows how to call the IsMatch(String, String) method. class TestClass { static void Main() { var toBeMatched = \"This is a string to be matched.\"; var isMatch = toBeMatched.IsMatch(\"*a string*\"); // IsMatch is true. } } Obfuscate(String, Int32) This method obfuscates chararacters in the specified string. Declaration public static string Obfuscate(this string value, int maxCharsToShow = 4) Parameters Type Name Description System.String value The string to obfuscate. System.Int32 maxCharsToShow The number of chars to leave exposed. Returns Type Description System.String The obfuscated string. Reverse(String) This method reverses the characters in a string. Declaration public static string Reverse(this string incoming) Parameters Type Name Description System.String incoming The string to be reversed. Returns Type Description System.String A reversed version of the specified string. Shuffle(String) This method randomly shuffles the characters in a string. Declaration public static string Shuffle(this string incoming) Parameters Type Name Description System.String incoming The string to be shuffled. Returns Type Description System.String A randomly shuffled version of the specified string. ToBase64(String) This method encodes the given string with base-64 encoding. Declaration public static string ToBase64(this string value) Parameters Type Name Description System.String value The value to be encoded. Returns Type Description System.String The SHA512 hash for the value parameter."
  },
  "api/System.Threading.Tasks.html": {
    "href": "api/System.Threading.Tasks.html",
    "title": "Namespace System.Threading.Tasks",
    "keywords": "Namespace System.Threading.Tasks Classes TaskExtensions This class contains extension methods related to the System.Threading.Tasks.Task type."
  },
  "api/System.Threading.Tasks.TaskExtensions.html": {
    "href": "api/System.Threading.Tasks.TaskExtensions.html",
    "title": "Class TaskExtensions",
    "keywords": "Class TaskExtensions This class contains extension methods related to the System.Threading.Tasks.Task type. Inheritance System.Object TaskExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System.Threading.Tasks Assembly : CG.Core.dll Syntax public static class TaskExtensions Methods WaitAll(IEnumerable<Task>, Int32, Int32, CancellationToken) This method runs the collection of tasks while limiting the number that run concurrently to, at most, maxConcurrency . Declaration public static void WaitAll(this IEnumerable<Task> tasks, int maxConcurrency, int maxTimeout = -1, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IEnumerable < System.Threading.Tasks.Task > tasks The collection of tasks to run. System.Int32 maxConcurrency The maximum number of tasks to run concurrently. A positive value limits the number of concurrent operations to the set value. If it is -1, there is no limit on the number of concurrently running operations. System.Int32 maxTimeout The maximum number of milliseconds to wait for the operations to finish. System.Threading.CancellationToken token An optional cancellation token. WhenAll(IEnumerable<Task>, Int32, Int32, CancellationToken) This method runs the collection of tasks while limiting the number that run concurrently to, at most, maxConcurrency . Declaration public static async Task WhenAll(this IEnumerable<Task> tasks, int maxConcurrency, int maxTimeout = -1, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IEnumerable < System.Threading.Tasks.Task > tasks The collection of tasks to run. System.Int32 maxConcurrency The maximum number of tasks to run concurrently. A positive value limits the number of concurrent operations to the set value. If it is -1, there is no limit on the number of concurrently running operations. System.Int32 maxTimeout The maximum number of milliseconds to wait for the operations to finish. System.Threading.CancellationToken token An optional cancellation token. Returns Type Description System.Threading.Tasks.Task Remarks A task to perform the operation."
  },
  "api/System.TypeExtensions.html": {
    "href": "api/System.TypeExtensions.html",
    "title": "Class TypeExtensions",
    "keywords": "Class TypeExtensions This class contains extension methods related to the System.Type type. Inheritance System.Object TypeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Core.dll Syntax public static class TypeExtensions Methods DerivedTypes(Type, String, String) This method returns a list of all the public, concrete types that are derived from the specified type. Declaration public static Type[] DerivedTypes(this Type type, string assemblyWhiteList = \"\", string assemblyBlackList = \"Microsoft.*,System.*,netstandard\") Parameters Type Name Description System.Type type The type to use for the operation. System.String assemblyWhiteList An optional white list, for filtering the assemblies used in the operation. System.String assemblyBlackList An optional black list, for filtering the assemblies used in the operation. Returns Type Description System.Type [] An array of matching types."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Core.dll contains a general purpose software framework developed by CodeGator. Learn to use CG.Core to create applications, or peruse API references, sample code, tutorials, and more."
  }
}